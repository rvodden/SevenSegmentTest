
SevenSegmentTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001640  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abc  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a14  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cc  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd2  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e1       	ldi	r30, 0x18	; 24
  32:	f8 e0       	ldi	r31, 0x08	; 8
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a6 e6       	ldi	r26, 0x66	; 102
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	97 d2       	rcall	.+1326   	; 0x580 <main>
  52:	e0 c3       	rjmp	.+1984   	; 0x814 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <board_init>:
#include <util/delay.h>

void board_init() {
	int value;

	ioport_interface* led = ioport_construct(&DDRB,&PORTB,&PINB,PB1);
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	46 e3       	ldi	r20, 0x36	; 54
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	68 e3       	ldi	r22, 0x38	; 56
  5e:	70 e0       	ldi	r23, 0x00	; 0
  60:	87 e3       	ldi	r24, 0x37	; 55
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	66 d1       	rcall	.+716    	; 0x332 <ioport_construct>
  66:	ec 01       	movw	r28, r24
	
	ioport_interface* scl = ioport_construct(&DDRB,&PORTB,&PINB,PB2);
  68:	22 e0       	ldi	r18, 0x02	; 2
  6a:	46 e3       	ldi	r20, 0x36	; 54
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	68 e3       	ldi	r22, 0x38	; 56
  70:	70 e0       	ldi	r23, 0x00	; 0
  72:	87 e3       	ldi	r24, 0x37	; 55
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	5d d1       	rcall	.+698    	; 0x332 <ioport_construct>
  78:	5c 01       	movw	r10, r24
	ioport_interface* sda = ioport_construct(&DDRB,&PORTB,&PINB,PB0);
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	46 e3       	ldi	r20, 0x36	; 54
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	68 e3       	ldi	r22, 0x38	; 56
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	87 e3       	ldi	r24, 0x37	; 55
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	54 d1       	rcall	.+680    	; 0x332 <ioport_construct>
  8a:	4c 01       	movw	r8, r24
	ioport_interface*  cs = ioport_construct(&DDRB,&PORTB,&PINB,PB4);
  8c:	24 e0       	ldi	r18, 0x04	; 4
  8e:	46 e3       	ldi	r20, 0x36	; 54
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	68 e3       	ldi	r22, 0x38	; 56
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	87 e3       	ldi	r24, 0x37	; 55
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	4b d1       	rcall	.+662    	; 0x332 <ioport_construct>
  9c:	3c 01       	movw	r6, r24

	adc_interface* adc = adc_construct(&ADMUX, &ADCSRA, &ADCSRB, &ADCH, &ADCL);
  9e:	04 e2       	ldi	r16, 0x24	; 36
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	25 e2       	ldi	r18, 0x25	; 37
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	43 e2       	ldi	r20, 0x23	; 35
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	66 e2       	ldi	r22, 0x26	; 38
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	87 e2       	ldi	r24, 0x27	; 39
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	e7 d0       	rcall	.+462    	; 0x282 <adc_construct>
  b4:	6c 01       	movw	r12, r24
	adc_setup(adc);
  b6:	0c d1       	rcall	.+536    	; 0x2d0 <adc_setup>

	spi_interface *interface = tw_create_spi_interface(scl,sda,cs,&USIDR,&USICR,&USISR);
  b8:	0f 2e       	mov	r0, r31
  ba:	fe e2       	ldi	r31, 0x2E	; 46
  bc:	ef 2e       	mov	r14, r31
  be:	f1 2c       	mov	r15, r1
  c0:	f0 2d       	mov	r31, r0
  c2:	0d e2       	ldi	r16, 0x2D	; 45
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	2f e2       	ldi	r18, 0x2F	; 47
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	a3 01       	movw	r20, r6
  cc:	b4 01       	movw	r22, r8
  ce:	c5 01       	movw	r24, r10
  d0:	e1 d1       	rcall	.+962    	; 0x494 <tw_create_spi_interface>
	
	ss_instance *instance = ss_init(interface, 4);
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	16 d0       	rcall	.+44     	; 0x104 <ss_init>
  d8:	8c 01       	movw	r16, r24

	ioport_configure_as_output(led);
  da:	ce 01       	movw	r24, r28
  dc:	98 d1       	rcall	.+816    	; 0x40e <ioport_configure_as_output>
	ioport_setlow(led);
  de:	ce 01       	movw	r24, r28
  e0:	46 d1       	rcall	.+652    	; 0x36e <ioport_setlow>
	
	

	ss_set_dp(instance,2);
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	c8 01       	movw	r24, r16
  e6:	69 d0       	rcall	.+210    	; 0x1ba <ss_set_dp>
	
	while (1) {
		value = adc_read(adc);
  e8:	c6 01       	movw	r24, r12
  ea:	04 d1       	rcall	.+520    	; 0x2f4 <adc_read>
		ss_write_int(instance, value);
  ec:	bc 01       	movw	r22, r24
  ee:	c8 01       	movw	r24, r16
  f0:	96 d0       	rcall	.+300    	; 0x21e <ss_write_int>
		ioport_toggle(led);
  f2:	ce 01       	movw	r24, r28
  f4:	64 d1       	rcall	.+712    	; 0x3be <ioport_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	91 e6       	ldi	r25, 0x61	; 97
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <board_init+0xa4>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <board_init+0xaa>
 100:	00 00       	nop
 102:	f2 cf       	rjmp	.-28     	; 0xe8 <board_init+0x92>

00000104 <ss_init>:
	char				decimal_points;
};

/* Implementation of public functions */

ss_instance *ss_init( const spi_interface *interface, int digits ) {
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
 112:	7b 01       	movw	r14, r22
	
	ss_instance *instance = malloc(sizeof(ss_instance));
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	5c d2       	rcall	.+1208   	; 0x5d2 <malloc>
 11a:	8c 01       	movw	r16, r24
	instance->interface = interface;
 11c:	fc 01       	movw	r30, r24
 11e:	d1 83       	std	Z+1, r29	; 0x01
 120:	c0 83       	st	Z, r28
	instance->digits    = digits;
 122:	f3 82       	std	Z+3, r15	; 0x03
 124:	e2 82       	std	Z+2, r14	; 0x02
	instance->values	= malloc(digits);
 126:	c7 01       	movw	r24, r14
 128:	54 d2       	rcall	.+1192   	; 0x5d2 <malloc>
 12a:	f8 01       	movw	r30, r16
 12c:	95 83       	std	Z+5, r25	; 0x05
 12e:	84 83       	std	Z+4, r24	; 0x04
	instance->decimal_points = 0;
 130:	16 82       	std	Z+6, r1	; 0x06

	spi_setup(interface);
 132:	ce 01       	movw	r24, r28
 134:	dc d1       	rcall	.+952    	; 0x4ee <spi_setup>
	spi_write(interface, SS_SCAN_LIMIT, 0x07); /* set to 8 digit display */
 136:	47 e0       	ldi	r20, 0x07	; 7
 138:	6b e0       	ldi	r22, 0x0B	; 11
 13a:	ce 01       	movw	r24, r28
 13c:	f6 d1       	rcall	.+1004   	; 0x52a <spi_write>
	spi_write(interface, SS_DECODE_MODE, 0xFF); /* set all digits to BCD */
 13e:	4f ef       	ldi	r20, 0xFF	; 255
 140:	69 e0       	ldi	r22, 0x09	; 9
 142:	ce 01       	movw	r24, r28
 144:	f2 d1       	rcall	.+996    	; 0x52a <spi_write>
	spi_write(interface, SS_INTENSITY, 0x07); /* set intensity to half */
 146:	47 e0       	ldi	r20, 0x07	; 7
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	ce 01       	movw	r24, r28
 14c:	ee d1       	rcall	.+988    	; 0x52a <spi_write>
	spi_write(interface, SS_DISPLAY_TEST, 0x00); /* Disable test mode */
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	6f e0       	ldi	r22, 0x0F	; 15
 152:	ce 01       	movw	r24, r28
 154:	ea d1       	rcall	.+980    	; 0x52a <spi_write>
	spi_write(interface, SS_SHUTDOWN, 0x01);  /* disable shutdown mode */
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	6c e0       	ldi	r22, 0x0C	; 12
 15a:	ce 01       	movw	r24, r28
 15c:	e6 d1       	rcall	.+972    	; 0x52a <spi_write>

	return instance;
}
 15e:	c8 01       	movw	r24, r16
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	08 95       	ret

0000016e <ss_write_digit>:

void ss_write_digit(const ss_instance *instance, uint8_t digit, uint8_t value) {
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8c 01       	movw	r16, r24
 178:	d6 2f       	mov	r29, r22
 17a:	c4 2f       	mov	r28, r20
	if ( instance->decimal_points & (1<<digit) ) /* is decimal point set */
 17c:	dc 01       	movw	r26, r24
 17e:	16 96       	adiw	r26, 0x06	; 6
 180:	8c 91       	ld	r24, X
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <ss_write_digit+0x1c>
 186:	95 95       	asr	r25
 188:	87 95       	ror	r24
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <ss_write_digit+0x18>
 18e:	80 fd       	sbrc	r24, 0
		value += 0x80;
 190:	c0 58       	subi	r28, 0x80	; 128
	spi_write(instance->interface ,SS_D0 + digit, value);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	6d 0f       	add	r22, r29
 196:	4c 2f       	mov	r20, r28
 198:	f8 01       	movw	r30, r16
 19a:	80 81       	ld	r24, Z
 19c:	91 81       	ldd	r25, Z+1	; 0x01
 19e:	c5 d1       	rcall	.+906    	; 0x52a <spi_write>
	instance->values[digit] = value;
 1a0:	d8 01       	movw	r26, r16
 1a2:	14 96       	adiw	r26, 0x04	; 4
 1a4:	ed 91       	ld	r30, X+
 1a6:	fc 91       	ld	r31, X
 1a8:	15 97       	sbiw	r26, 0x05	; 5
 1aa:	ed 0f       	add	r30, r29
 1ac:	f1 1d       	adc	r31, r1
 1ae:	c0 83       	st	Z, r28
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <ss_set_dp>:

void ss_set_dp(ss_instance *instance, uint8_t digit) {
	instance->decimal_points |= (1<<digit);
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	06 2e       	mov	r0, r22
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <ss_set_dp+0xc>
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <ss_set_dp+0x8>
 1ca:	dc 01       	movw	r26, r24
 1cc:	16 96       	adiw	r26, 0x06	; 6
 1ce:	3c 91       	ld	r19, X
 1d0:	16 97       	sbiw	r26, 0x06	; 6
 1d2:	23 2b       	or	r18, r19
 1d4:	16 96       	adiw	r26, 0x06	; 6
 1d6:	2c 93       	st	X, r18
 1d8:	16 97       	sbiw	r26, 0x06	; 6
	ss_write_digit(instance,digit,instance->values[digit]);
 1da:	14 96       	adiw	r26, 0x04	; 4
 1dc:	ed 91       	ld	r30, X+
 1de:	fc 91       	ld	r31, X
 1e0:	15 97       	sbiw	r26, 0x05	; 5
 1e2:	e6 0f       	add	r30, r22
 1e4:	f1 1d       	adc	r31, r1
 1e6:	40 81       	ld	r20, Z
 1e8:	c2 df       	rcall	.-124    	; 0x16e <ss_write_digit>
 1ea:	08 95       	ret

000001ec <ss_blank_digit>:
}

void ss_blank_digit(const ss_instance *instance, uint8_t digit) {
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	8c 01       	movw	r16, r24
 1f4:	c6 2f       	mov	r28, r22
	spi_write(instance->interface  ,SS_D0 + digit, 0x0F);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	6c 0f       	add	r22, r28
 1fa:	4f e0       	ldi	r20, 0x0F	; 15
 1fc:	dc 01       	movw	r26, r24
 1fe:	8d 91       	ld	r24, X+
 200:	9c 91       	ld	r25, X
 202:	93 d1       	rcall	.+806    	; 0x52a <spi_write>
	instance->values[digit] = 10;
 204:	d8 01       	movw	r26, r16
 206:	14 96       	adiw	r26, 0x04	; 4
 208:	ed 91       	ld	r30, X+
 20a:	fc 91       	ld	r31, X
 20c:	15 97       	sbiw	r26, 0x05	; 5
 20e:	ec 0f       	add	r30, r28
 210:	f1 1d       	adc	r31, r1
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	80 83       	st	Z, r24
}
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <ss_write_int>:

void ss_write_int(const ss_instance *instance, int value) {
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
 230:	cb 01       	movw	r24, r22
	int digit = instance->digits - 1;
 232:	f8 01       	movw	r30, r16
 234:	c2 81       	ldd	r28, Z+2	; 0x02
 236:	d3 81       	ldd	r29, Z+3	; 0x03
 238:	21 97       	sbiw	r28, 0x01	; 1
	while (value != 0) {
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	91 f0       	breq	.+36     	; 0x262 <__stack+0x3>
		ss_write_digit(instance, digit, value % 10);
 23e:	0f 2e       	mov	r0, r31
 240:	fa e0       	ldi	r31, 0x0A	; 10
 242:	cf 2e       	mov	r12, r31
 244:	d1 2c       	mov	r13, r1
 246:	f0 2d       	mov	r31, r0
 248:	b6 01       	movw	r22, r12
 24a:	9c d1       	rcall	.+824    	; 0x584 <__divmodhi4>
 24c:	e6 2e       	mov	r14, r22
 24e:	f7 2e       	mov	r15, r23
 250:	48 2f       	mov	r20, r24
 252:	6c 2f       	mov	r22, r28
 254:	c8 01       	movw	r24, r16
 256:	8b df       	rcall	.-234    	; 0x16e <ss_write_digit>
		value /= 10;
 258:	8e 2d       	mov	r24, r14
 25a:	9f 2d       	mov	r25, r15
		digit--;
 25c:	21 97       	sbiw	r28, 0x01	; 1
	instance->values[digit] = 10;
}

void ss_write_int(const ss_instance *instance, int value) {
	int digit = instance->digits - 1;
	while (value != 0) {
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	99 f7       	brne	.-26     	; 0x248 <ss_write_int+0x2a>
		ss_write_digit(instance, digit, value % 10);
		value /= 10;
		digit--;
	}

	while (digit >= 0) {
 262:	dd 23       	and	r29, r29
 264:	2c f0       	brlt	.+10     	; 0x270 <__stack+0x11>
		ss_blank_digit(instance, digit);
 266:	6c 2f       	mov	r22, r28
 268:	c8 01       	movw	r24, r16
 26a:	c0 df       	rcall	.-128    	; 0x1ec <ss_blank_digit>
		digit--;
 26c:	21 97       	sbiw	r28, 0x01	; 1
 26e:	d8 f7       	brcc	.-10     	; 0x266 <__stack+0x7>
	} 
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <adc_construct>:
	volatile uint8_t *control_a_register, 
	volatile uint8_t *control_b_register, 
	volatile uint8_t *high_data_register, 
	volatile uint8_t *low_data_register 
	)
{
 282:	af 92       	push	r10
 284:	bf 92       	push	r11
 286:	cf 92       	push	r12
 288:	df 92       	push	r13
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	5c 01       	movw	r10, r24
 298:	6b 01       	movw	r12, r22
 29a:	7a 01       	movw	r14, r20
 29c:	e9 01       	movw	r28, r18
	adc_interface* interface = malloc(sizeof(adc_interface));
 29e:	8a e0       	ldi	r24, 0x0A	; 10
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	97 d1       	rcall	.+814    	; 0x5d2 <malloc>
 2a4:	fc 01       	movw	r30, r24

	interface->mux_selection_register = mux_selection_register;
 2a6:	b1 82       	std	Z+1, r11	; 0x01
 2a8:	a0 82       	st	Z, r10
	interface->control_a_register = control_a_register;
 2aa:	d3 82       	std	Z+3, r13	; 0x03
 2ac:	c2 82       	std	Z+2, r12	; 0x02
	interface->control_b_register = control_b_register;
 2ae:	f5 82       	std	Z+5, r15	; 0x05
 2b0:	e4 82       	std	Z+4, r14	; 0x04
	interface->high_data_register = high_data_register;
 2b2:	d7 83       	std	Z+7, r29	; 0x07
 2b4:	c6 83       	std	Z+6, r28	; 0x06
	interface->low_data_register = low_data_register;
 2b6:	11 87       	std	Z+9, r17	; 0x09
 2b8:	00 87       	std	Z+8, r16	; 0x08

	return interface;
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	bf 90       	pop	r11
 2cc:	af 90       	pop	r10
 2ce:	08 95       	ret

000002d0 <adc_setup>:

void adc_setup(const adc_interface* interface)
{
 2d0:	fc 01       	movw	r30, r24
	/* configure 1.1V as voltage reference, PB3 as input pin and left adjust the result */
	*(interface->mux_selection_register)  |= 0x03 | (1<<REFS1);
 2d2:	a0 81       	ld	r26, Z
 2d4:	b1 81       	ldd	r27, Z+1	; 0x01
 2d6:	8c 91       	ld	r24, X
 2d8:	83 68       	ori	r24, 0x83	; 131
 2da:	8c 93       	st	X, r24
	*(interface->control_a_register)      |=  (1<<ADEN); /* enable ADC */
 2dc:	a2 81       	ldd	r26, Z+2	; 0x02
 2de:	b3 81       	ldd	r27, Z+3	; 0x03
 2e0:	8c 91       	ld	r24, X
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	8c 93       	st	X, r24
	*(interface->control_a_register)      &= ~(1<<ADIE); /* disable interrupt */
 2e6:	02 80       	ldd	r0, Z+2	; 0x02
 2e8:	f3 81       	ldd	r31, Z+3	; 0x03
 2ea:	e0 2d       	mov	r30, r0
 2ec:	80 81       	ld	r24, Z
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <adc_read>:
}

int adc_read(const adc_interface* interface)
{
 2f4:	dc 01       	movw	r26, r24
	/* Start conversion */
	*(interface->control_a_register) |= (1<<ADSC);
 2f6:	12 96       	adiw	r26, 0x02	; 2
 2f8:	ed 91       	ld	r30, X+
 2fa:	fc 91       	ld	r31, X
 2fc:	13 97       	sbiw	r26, 0x03	; 3
 2fe:	80 81       	ld	r24, Z
 300:	80 64       	ori	r24, 0x40	; 64
 302:	80 83       	st	Z, r24
};

/* Private Functions */

void inline adc_wait_for_conversion(const adc_interface* interface) {
	while (*(interface->control_a_register) & (1<<ADSC));
 304:	12 96       	adiw	r26, 0x02	; 2
 306:	ed 91       	ld	r30, X+
 308:	fc 91       	ld	r31, X
 30a:	13 97       	sbiw	r26, 0x03	; 3
 30c:	90 81       	ld	r25, Z
 30e:	96 fd       	sbrc	r25, 6
 310:	fd cf       	rjmp	.-6      	; 0x30c <adc_read+0x18>
	/* Start conversion */
	*(interface->control_a_register) |= (1<<ADSC);

	adc_wait_for_conversion(interface);
	
	int value = *(interface->low_data_register);
 312:	18 96       	adiw	r26, 0x08	; 8
 314:	ed 91       	ld	r30, X+
 316:	fc 91       	ld	r31, X
 318:	19 97       	sbiw	r26, 0x09	; 9
 31a:	20 81       	ld	r18, Z
	value += (*(interface->high_data_register)<<8);
 31c:	16 96       	adiw	r26, 0x06	; 6
 31e:	ed 91       	ld	r30, X+
 320:	fc 91       	ld	r31, X
 322:	17 97       	sbiw	r26, 0x07	; 7
 324:	80 81       	ld	r24, Z

	return value;
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	98 2f       	mov	r25, r24
 32a:	88 27       	eor	r24, r24
 32c:	82 0f       	add	r24, r18
 32e:	91 1d       	adc	r25, r1
 330:	08 95       	ret

00000332 <ioport_construct>:
void inline ioport_pause_until_high(ioport_interface* interface) {
	while (!( *(interface->pin) & (1 << interface->bit)));
}

void inline ioport_configure_as_input(ioport_interface* interface) {
	*(interface->direction_register) &= ~(1 << interface->bit);
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	6c 01       	movw	r12, r24
 342:	7b 01       	movw	r14, r22
 344:	8a 01       	movw	r16, r20
 346:	c2 2f       	mov	r28, r18
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	42 d1       	rcall	.+644    	; 0x5d2 <malloc>
 34e:	fc 01       	movw	r30, r24
 350:	d1 82       	std	Z+1, r13	; 0x01
 352:	c0 82       	st	Z, r12
 354:	f3 82       	std	Z+3, r15	; 0x03
 356:	e2 82       	std	Z+2, r14	; 0x02
 358:	15 83       	std	Z+5, r17	; 0x05
 35a:	04 83       	std	Z+4, r16	; 0x04
 35c:	c6 83       	std	Z+6, r28	; 0x06
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	08 95       	ret

0000036e <ioport_setlow>:
 36e:	dc 01       	movw	r26, r24
 370:	12 96       	adiw	r26, 0x02	; 2
 372:	ed 91       	ld	r30, X+
 374:	fc 91       	ld	r31, X
 376:	13 97       	sbiw	r26, 0x03	; 3
 378:	40 81       	ld	r20, Z
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	16 96       	adiw	r26, 0x06	; 6
 382:	0c 90       	ld	r0, X
 384:	02 c0       	rjmp	.+4      	; 0x38a <ioport_setlow+0x1c>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <ioport_setlow+0x18>
 38e:	cb 01       	movw	r24, r22
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <ioport_sethigh>:
 398:	dc 01       	movw	r26, r24
 39a:	12 96       	adiw	r26, 0x02	; 2
 39c:	ed 91       	ld	r30, X+
 39e:	fc 91       	ld	r31, X
 3a0:	13 97       	sbiw	r26, 0x03	; 3
 3a2:	40 81       	ld	r20, Z
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	c9 01       	movw	r24, r18
 3aa:	16 96       	adiw	r26, 0x06	; 6
 3ac:	0c 90       	ld	r0, X
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <ioport_sethigh+0x1c>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <ioport_sethigh+0x18>
 3b8:	84 2b       	or	r24, r20
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <ioport_toggle>:
 3be:	dc 01       	movw	r26, r24
 3c0:	12 96       	adiw	r26, 0x02	; 2
 3c2:	ed 91       	ld	r30, X+
 3c4:	fc 91       	ld	r31, X
 3c6:	13 97       	sbiw	r26, 0x03	; 3
 3c8:	40 81       	ld	r20, Z
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	16 96       	adiw	r26, 0x06	; 6
 3d2:	0c 90       	ld	r0, X
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <ioport_toggle+0x1c>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <ioport_toggle+0x18>
 3de:	84 27       	eor	r24, r20
 3e0:	80 83       	st	Z, r24
 3e2:	08 95       	ret

000003e4 <ioport_pause_until_high>:
 3e4:	dc 01       	movw	r26, r24
 3e6:	14 96       	adiw	r26, 0x04	; 4
 3e8:	ed 91       	ld	r30, X+
 3ea:	fc 91       	ld	r31, X
 3ec:	15 97       	sbiw	r26, 0x05	; 5
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	16 96       	adiw	r26, 0x06	; 6
 3f4:	0c 90       	ld	r0, X
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <ioport_pause_until_high+0x18>
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <ioport_pause_until_high+0x14>
 400:	80 81       	ld	r24, Z
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	82 23       	and	r24, r18
 406:	93 23       	and	r25, r19
 408:	89 2b       	or	r24, r25
 40a:	d1 f3       	breq	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>
 40c:	08 95       	ret

0000040e <ioport_configure_as_output>:
};

void inline ioport_configure_as_output(ioport_interface* interface) {
 40e:	dc 01       	movw	r26, r24
	*(interface->direction_register) |= (1 << interface->bit);
 410:	ed 91       	ld	r30, X+
 412:	fc 91       	ld	r31, X
 414:	11 97       	sbiw	r26, 0x01	; 1
 416:	40 81       	ld	r20, Z
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	c9 01       	movw	r24, r18
 41e:	16 96       	adiw	r26, 0x06	; 6
 420:	0c 90       	ld	r0, X
 422:	02 c0       	rjmp	.+4      	; 0x428 <ioport_configure_as_output+0x1a>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <ioport_configure_as_output+0x16>
 42c:	84 2b       	or	r24, r20
 42e:	80 83       	st	Z, r24
 430:	08 95       	ret

00000432 <SPI_Push>:
	volatile uint8_t* usi_status_register;	  /** the universal serial interface status register */
};

/* Private Functions */

 void SPI_Push(const spi_interface *interface, uint8_t data) {
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	ec 01       	movw	r28, r24
 43a:	16 2f       	mov	r17, r22
	 ioport_setlow(interface->scl);
 43c:	88 81       	ld	r24, Y
 43e:	99 81       	ldd	r25, Y+1	; 0x01
 440:	96 df       	rcall	.-212    	; 0x36e <ioport_setlow>
	 *(interface->usi_data_register) = data;
 442:	ee 81       	ldd	r30, Y+6	; 0x06
 444:	ff 81       	ldd	r31, Y+7	; 0x07
 446:	10 83       	st	Z, r17
	 *(interface->usi_status_register) = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)| /* Clear flags */
 448:	ea 85       	ldd	r30, Y+10	; 0x0a
 44a:	fb 85       	ldd	r31, Y+11	; 0x0b
 44c:	80 ef       	ldi	r24, 0xF0	; 240
 44e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	87 e8       	ldi	r24, 0x87	; 135
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <SPI_Push+0x20>
 456:	00 00       	nop
										 (0x0 << USICNT0);											  /* set USI to shift 8 bits */

	 do {
		 _delay_us(T2_TWI);
		 *(interface->usi_control_register) |= (1 << USITC); /* toggle clock - positive edge */
 458:	e8 85       	ldd	r30, Y+8	; 0x08
 45a:	f9 85       	ldd	r31, Y+9	; 0x09
 45c:	80 81       	ld	r24, Z
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	80 83       	st	Z, r24
		 ioport_pause_until_high(interface->scl);
 462:	88 81       	ld	r24, Y
 464:	99 81       	ldd	r25, Y+1	; 0x01
 466:	be df       	rcall	.-132    	; 0x3e4 <ioport_pause_until_high>
 468:	88 ee       	ldi	r24, 0xE8	; 232
 46a:	93 e0       	ldi	r25, 0x03	; 3
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <SPI_Push+0x3a>
		 _delay_us(T4_TWI);
		 *(interface->usi_control_register) |= (1 << USITC); /* toggle clock - negative edge */
 470:	e8 85       	ldd	r30, Y+8	; 0x08
 472:	f9 85       	ldd	r31, Y+9	; 0x09
 474:	80 81       	ld	r24, Z
 476:	81 60       	ori	r24, 0x01	; 1
 478:	80 83       	st	Z, r24
	 } while (!(*(interface->usi_status_register) & (1 << USIOIF)));
 47a:	ea 85       	ldd	r30, Y+10	; 0x0a
 47c:	fb 85       	ldd	r31, Y+11	; 0x0b
 47e:	80 81       	ld	r24, Z
 480:	86 ff       	sbrs	r24, 6
 482:	e6 cf       	rjmp	.-52     	; 0x450 <SPI_Push+0x1e>
 484:	97 e8       	ldi	r25, 0x87	; 135
 486:	9a 95       	dec	r25
 488:	f1 f7       	brne	.-4      	; 0x486 <SPI_Push+0x54>
 48a:	00 00       	nop

	 /* do reading here when the time comes */

	 _delay_us(T2_TWI);
 }
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	08 95       	ret

00000494 <tw_create_spi_interface>:
			   
	volatile uint8_t* usi_data_register, 
	volatile uint8_t* usi_control_register, 
	volatile uint8_t* usi_status_register 
	)
{
 494:	8f 92       	push	r8
 496:	9f 92       	push	r9
 498:	af 92       	push	r10
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	4c 01       	movw	r8, r24
 4ae:	5b 01       	movw	r10, r22
 4b0:	6a 01       	movw	r12, r20
 4b2:	e9 01       	movw	r28, r18
	spi_interface *interface = malloc(sizeof(spi_interface));
 4b4:	8c e0       	ldi	r24, 0x0C	; 12
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	8c d0       	rcall	.+280    	; 0x5d2 <malloc>
 4ba:	fc 01       	movw	r30, r24

	interface->scl = scl;
 4bc:	91 82       	std	Z+1, r9	; 0x01
 4be:	80 82       	st	Z, r8
	interface->sda = sda;
 4c0:	b3 82       	std	Z+3, r11	; 0x03
 4c2:	a2 82       	std	Z+2, r10	; 0x02
	interface->cs =  cs;
 4c4:	d5 82       	std	Z+5, r13	; 0x05
 4c6:	c4 82       	std	Z+4, r12	; 0x04

	interface->usi_data_register = usi_data_register;
 4c8:	d7 83       	std	Z+7, r29	; 0x07
 4ca:	c6 83       	std	Z+6, r28	; 0x06
	interface->usi_control_register = usi_control_register;
 4cc:	11 87       	std	Z+9, r17	; 0x09
 4ce:	00 87       	std	Z+8, r16	; 0x08
	interface->usi_status_register = usi_status_register;
 4d0:	f3 86       	std	Z+11, r15	; 0x0b
 4d2:	e2 86       	std	Z+10, r14	; 0x0a
	return interface;
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	bf 90       	pop	r11
 4e6:	af 90       	pop	r10
 4e8:	9f 90       	pop	r9
 4ea:	8f 90       	pop	r8
 4ec:	08 95       	ret

000004ee <spi_setup>:

 void spi_setup(const spi_interface *interface) {
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
	  ioport_configure_as_output(interface->scl);
 4f4:	88 81       	ld	r24, Y
 4f6:	99 81       	ldd	r25, Y+1	; 0x01
 4f8:	8a df       	rcall	.-236    	; 0x40e <ioport_configure_as_output>
	  ioport_configure_as_output(interface->sda);
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	9b 81       	ldd	r25, Y+3	; 0x03
 4fe:	87 df       	rcall	.-242    	; 0x40e <ioport_configure_as_output>
	  ioport_configure_as_output(interface->cs);
 500:	8c 81       	ldd	r24, Y+4	; 0x04
 502:	9d 81       	ldd	r25, Y+5	; 0x05
 504:	84 df       	rcall	.-248    	; 0x40e <ioport_configure_as_output>

	  /* de-select chip */
	  ioport_sethigh(interface->cs);
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	9d 81       	ldd	r25, Y+5	; 0x05
 50a:	46 df       	rcall	.-372    	; 0x398 <ioport_sethigh>

	 /* Pre-load register with 1 (as pull-ups mean a floating line is high). */
	 *(interface->usi_data_register) = 0xFF;
 50c:	ee 81       	ldd	r30, Y+6	; 0x06
 50e:	ff 81       	ldd	r31, Y+7	; 0x07
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	80 83       	st	Z, r24

	 *(interface->usi_control_register) = (0 << USISIE) | (0 << USIOIE) |				  /* Disable interrupts.         */
 514:	e8 85       	ldd	r30, Y+8	; 0x08
 516:	f9 85       	ldd	r31, Y+9	; 0x09
 518:	8a e2       	ldi	r24, 0x2A	; 42
 51a:	80 83       	st	Z, r24
										  (1 << USIWM1) | (0 << USIWM0) |				  /* Set USI in Two-wire mode.   */
										  (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | /* Software clock              */
										  (0 << USITC);

	 *(interface->usi_status_register) = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | /* clear flags   */
 51c:	ea 85       	ldd	r30, Y+10	; 0x0a
 51e:	fb 85       	ldd	r31, Y+11	; 0x0b
 520:	80 ef       	ldi	r24, 0xF0	; 240
 522:	80 83       	st	Z, r24
										 (0x0 << USICNT0);											   /* reset counter */
 }
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <spi_write>:

 void spi_write(const spi_interface *interface, uint8_t addr, uint8_t data) {
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ec 01       	movw	r28, r24
 534:	06 2f       	mov	r16, r22
 536:	14 2f       	mov	r17, r20

	 /* at this stage we should detect if this is a read or write operation - but I'm only doing writes right now */

	 /* select appropriate chip */
	 ioport_setlow(interface->cs);
 538:	8c 81       	ldd	r24, Y+4	; 0x04
 53a:	9d 81       	ldd	r25, Y+5	; 0x05
 53c:	18 df       	rcall	.-464    	; 0x36e <ioport_setlow>

	 /* release SCL so that a start condition can be raised */
	 ioport_sethigh(interface->scl);
 53e:	88 81       	ld	r24, Y
 540:	99 81       	ldd	r25, Y+1	; 0x01
 542:	2a df       	rcall	.-428    	; 0x398 <ioport_sethigh>

	 /* wait until SCL comes high in case a slave is holding it low */
	 ioport_pause_until_high(interface->scl);
 544:	88 81       	ld	r24, Y
 546:	99 81       	ldd	r25, Y+1	; 0x01
 548:	4d df       	rcall	.-358    	; 0x3e4 <ioport_pause_until_high>
	 
	 /* start condition */
	 ioport_setlow(interface->sda);
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	9b 81       	ldd	r25, Y+3	; 0x03
 54e:	0f df       	rcall	.-482    	; 0x36e <ioport_setlow>
 550:	87 e8       	ldi	r24, 0x87	; 135
 552:	8a 95       	dec	r24
 554:	f1 f7       	brne	.-4      	; 0x552 <spi_write+0x28>
 556:	00 00       	nop
	 _delay_us(T2_TWI);
	 ioport_setlow(interface->scl);
 558:	88 81       	ld	r24, Y
 55a:	99 81       	ldd	r25, Y+1	; 0x01
 55c:	08 df       	rcall	.-496    	; 0x36e <ioport_setlow>
	 ioport_sethigh(interface->sda);
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	9b 81       	ldd	r25, Y+3	; 0x03
 562:	1a df       	rcall	.-460    	; 0x398 <ioport_sethigh>

	 /* should probably do something to support messages longer than one byte */

	 /* write address */
	 SPI_Push(interface, addr);
 564:	60 2f       	mov	r22, r16
 566:	ce 01       	movw	r24, r28
 568:	64 df       	rcall	.-312    	; 0x432 <SPI_Push>
	 SPI_Push(interface, data);
 56a:	61 2f       	mov	r22, r17
 56c:	ce 01       	movw	r24, r28
 56e:	61 df       	rcall	.-318    	; 0x432 <SPI_Push>

	 /* raise appropriate chip select pin */
	 ioport_sethigh(interface->cs);
 570:	8c 81       	ldd	r24, Y+4	; 0x04
 572:	9d 81       	ldd	r25, Y+5	; 0x05
 574:	11 df       	rcall	.-478    	; 0x398 <ioport_sethigh>
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <main>:

/* register constants */

int main(void)
{
	board_init();
 580:	6a dd       	rcall	.-1324   	; 0x56 <board_init>
 582:	ff cf       	rjmp	.-2      	; 0x582 <main+0x2>

00000584 <__divmodhi4>:
 584:	97 fb       	bst	r25, 7
 586:	07 2e       	mov	r0, r23
 588:	16 f4       	brtc	.+4      	; 0x58e <__divmodhi4+0xa>
 58a:	00 94       	com	r0
 58c:	06 d0       	rcall	.+12     	; 0x59a <__divmodhi4_neg1>
 58e:	77 fd       	sbrc	r23, 7
 590:	08 d0       	rcall	.+16     	; 0x5a2 <__divmodhi4_neg2>
 592:	0b d0       	rcall	.+22     	; 0x5aa <__udivmodhi4>
 594:	07 fc       	sbrc	r0, 7
 596:	05 d0       	rcall	.+10     	; 0x5a2 <__divmodhi4_neg2>
 598:	3e f4       	brtc	.+14     	; 0x5a8 <__divmodhi4_exit>

0000059a <__divmodhi4_neg1>:
 59a:	90 95       	com	r25
 59c:	81 95       	neg	r24
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	08 95       	ret

000005a2 <__divmodhi4_neg2>:
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255

000005a8 <__divmodhi4_exit>:
 5a8:	08 95       	ret

000005aa <__udivmodhi4>:
 5aa:	aa 1b       	sub	r26, r26
 5ac:	bb 1b       	sub	r27, r27
 5ae:	51 e1       	ldi	r21, 0x11	; 17
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__udivmodhi4_ep>

000005b2 <__udivmodhi4_loop>:
 5b2:	aa 1f       	adc	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	a6 17       	cp	r26, r22
 5b8:	b7 07       	cpc	r27, r23
 5ba:	10 f0       	brcs	.+4      	; 0x5c0 <__udivmodhi4_ep>
 5bc:	a6 1b       	sub	r26, r22
 5be:	b7 0b       	sbc	r27, r23

000005c0 <__udivmodhi4_ep>:
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	5a 95       	dec	r21
 5c6:	a9 f7       	brne	.-22     	; 0x5b2 <__udivmodhi4_loop>
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	bc 01       	movw	r22, r24
 5ce:	cd 01       	movw	r24, r26
 5d0:	08 95       	ret

000005d2 <malloc>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	91 05       	cpc	r25, r1
 5de:	10 f4       	brcc	.+4      	; 0x5e4 <malloc+0x12>
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__flp>
 5e8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__flp+0x1>
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	a0 e0       	ldi	r26, 0x00	; 0
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	30 97       	sbiw	r30, 0x00	; 0
 5f6:	19 f1       	breq	.+70     	; 0x63e <malloc+0x6c>
 5f8:	40 81       	ld	r20, Z
 5fa:	51 81       	ldd	r21, Z+1	; 0x01
 5fc:	02 81       	ldd	r16, Z+2	; 0x02
 5fe:	13 81       	ldd	r17, Z+3	; 0x03
 600:	48 17       	cp	r20, r24
 602:	59 07       	cpc	r21, r25
 604:	c8 f0       	brcs	.+50     	; 0x638 <malloc+0x66>
 606:	84 17       	cp	r24, r20
 608:	95 07       	cpc	r25, r21
 60a:	69 f4       	brne	.+26     	; 0x626 <malloc+0x54>
 60c:	10 97       	sbiw	r26, 0x00	; 0
 60e:	31 f0       	breq	.+12     	; 0x61c <malloc+0x4a>
 610:	12 96       	adiw	r26, 0x02	; 2
 612:	0c 93       	st	X, r16
 614:	12 97       	sbiw	r26, 0x02	; 2
 616:	13 96       	adiw	r26, 0x03	; 3
 618:	1c 93       	st	X, r17
 61a:	27 c0       	rjmp	.+78     	; 0x66a <malloc+0x98>
 61c:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <__flp>
 620:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <__flp+0x1>
 624:	22 c0       	rjmp	.+68     	; 0x66a <malloc+0x98>
 626:	21 15       	cp	r18, r1
 628:	31 05       	cpc	r19, r1
 62a:	19 f0       	breq	.+6      	; 0x632 <malloc+0x60>
 62c:	42 17       	cp	r20, r18
 62e:	53 07       	cpc	r21, r19
 630:	18 f4       	brcc	.+6      	; 0x638 <malloc+0x66>
 632:	9a 01       	movw	r18, r20
 634:	bd 01       	movw	r22, r26
 636:	ef 01       	movw	r28, r30
 638:	df 01       	movw	r26, r30
 63a:	f8 01       	movw	r30, r16
 63c:	db cf       	rjmp	.-74     	; 0x5f4 <malloc+0x22>
 63e:	21 15       	cp	r18, r1
 640:	31 05       	cpc	r19, r1
 642:	f9 f0       	breq	.+62     	; 0x682 <malloc+0xb0>
 644:	28 1b       	sub	r18, r24
 646:	39 0b       	sbc	r19, r25
 648:	24 30       	cpi	r18, 0x04	; 4
 64a:	31 05       	cpc	r19, r1
 64c:	80 f4       	brcc	.+32     	; 0x66e <malloc+0x9c>
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	9b 81       	ldd	r25, Y+3	; 0x03
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	21 f0       	breq	.+8      	; 0x660 <malloc+0x8e>
 658:	fb 01       	movw	r30, r22
 65a:	93 83       	std	Z+3, r25	; 0x03
 65c:	82 83       	std	Z+2, r24	; 0x02
 65e:	04 c0       	rjmp	.+8      	; 0x668 <malloc+0x96>
 660:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__flp+0x1>
 664:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__flp>
 668:	fe 01       	movw	r30, r28
 66a:	32 96       	adiw	r30, 0x02	; 2
 66c:	44 c0       	rjmp	.+136    	; 0x6f6 <malloc+0x124>
 66e:	fe 01       	movw	r30, r28
 670:	e2 0f       	add	r30, r18
 672:	f3 1f       	adc	r31, r19
 674:	81 93       	st	Z+, r24
 676:	91 93       	st	Z+, r25
 678:	22 50       	subi	r18, 0x02	; 2
 67a:	31 09       	sbc	r19, r1
 67c:	39 83       	std	Y+1, r19	; 0x01
 67e:	28 83       	st	Y, r18
 680:	3a c0       	rjmp	.+116    	; 0x6f6 <malloc+0x124>
 682:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 686:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 68a:	23 2b       	or	r18, r19
 68c:	41 f4       	brne	.+16     	; 0x69e <malloc+0xcc>
 68e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 692:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 696:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
 69a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
 69e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 6a2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 6a6:	21 15       	cp	r18, r1
 6a8:	31 05       	cpc	r19, r1
 6aa:	41 f4       	brne	.+16     	; 0x6bc <malloc+0xea>
 6ac:	2d b7       	in	r18, 0x3d	; 61
 6ae:	3e b7       	in	r19, 0x3e	; 62
 6b0:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 6b4:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 6b8:	24 1b       	sub	r18, r20
 6ba:	35 0b       	sbc	r19, r21
 6bc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 6c0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 6c4:	e2 17       	cp	r30, r18
 6c6:	f3 07       	cpc	r31, r19
 6c8:	a0 f4       	brcc	.+40     	; 0x6f2 <malloc+0x120>
 6ca:	2e 1b       	sub	r18, r30
 6cc:	3f 0b       	sbc	r19, r31
 6ce:	28 17       	cp	r18, r24
 6d0:	39 07       	cpc	r19, r25
 6d2:	78 f0       	brcs	.+30     	; 0x6f2 <malloc+0x120>
 6d4:	ac 01       	movw	r20, r24
 6d6:	4e 5f       	subi	r20, 0xFE	; 254
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	24 17       	cp	r18, r20
 6dc:	35 07       	cpc	r19, r21
 6de:	48 f0       	brcs	.+18     	; 0x6f2 <malloc+0x120>
 6e0:	4e 0f       	add	r20, r30
 6e2:	5f 1f       	adc	r21, r31
 6e4:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <__data_end+0x1>
 6e8:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__data_end>
 6ec:	81 93       	st	Z+, r24
 6ee:	91 93       	st	Z+, r25
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <malloc+0x124>
 6f2:	e0 e0       	ldi	r30, 0x00	; 0
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	cf 01       	movw	r24, r30
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	08 95       	ret

00000702 <free>:
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	09 f4       	brne	.+2      	; 0x70c <free+0xa>
 70a:	81 c0       	rjmp	.+258    	; 0x80e <free+0x10c>
 70c:	fc 01       	movw	r30, r24
 70e:	32 97       	sbiw	r30, 0x02	; 2
 710:	13 82       	std	Z+3, r1	; 0x03
 712:	12 82       	std	Z+2, r1	; 0x02
 714:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__flp>
 718:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__flp+0x1>
 71c:	10 97       	sbiw	r26, 0x00	; 0
 71e:	81 f4       	brne	.+32     	; 0x740 <free+0x3e>
 720:	20 81       	ld	r18, Z
 722:	31 81       	ldd	r19, Z+1	; 0x01
 724:	82 0f       	add	r24, r18
 726:	93 1f       	adc	r25, r19
 728:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 72c:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 730:	28 17       	cp	r18, r24
 732:	39 07       	cpc	r19, r25
 734:	51 f5       	brne	.+84     	; 0x78a <free+0x88>
 736:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
 73a:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
 73e:	67 c0       	rjmp	.+206    	; 0x80e <free+0x10c>
 740:	ed 01       	movw	r28, r26
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	ce 17       	cp	r28, r30
 748:	df 07       	cpc	r29, r31
 74a:	40 f4       	brcc	.+16     	; 0x75c <free+0x5a>
 74c:	4a 81       	ldd	r20, Y+2	; 0x02
 74e:	5b 81       	ldd	r21, Y+3	; 0x03
 750:	9e 01       	movw	r18, r28
 752:	41 15       	cp	r20, r1
 754:	51 05       	cpc	r21, r1
 756:	f1 f0       	breq	.+60     	; 0x794 <free+0x92>
 758:	ea 01       	movw	r28, r20
 75a:	f5 cf       	rjmp	.-22     	; 0x746 <free+0x44>
 75c:	d3 83       	std	Z+3, r29	; 0x03
 75e:	c2 83       	std	Z+2, r28	; 0x02
 760:	40 81       	ld	r20, Z
 762:	51 81       	ldd	r21, Z+1	; 0x01
 764:	84 0f       	add	r24, r20
 766:	95 1f       	adc	r25, r21
 768:	c8 17       	cp	r28, r24
 76a:	d9 07       	cpc	r29, r25
 76c:	59 f4       	brne	.+22     	; 0x784 <free+0x82>
 76e:	88 81       	ld	r24, Y
 770:	99 81       	ldd	r25, Y+1	; 0x01
 772:	84 0f       	add	r24, r20
 774:	95 1f       	adc	r25, r21
 776:	02 96       	adiw	r24, 0x02	; 2
 778:	91 83       	std	Z+1, r25	; 0x01
 77a:	80 83       	st	Z, r24
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	9b 81       	ldd	r25, Y+3	; 0x03
 780:	93 83       	std	Z+3, r25	; 0x03
 782:	82 83       	std	Z+2, r24	; 0x02
 784:	21 15       	cp	r18, r1
 786:	31 05       	cpc	r19, r1
 788:	29 f4       	brne	.+10     	; 0x794 <free+0x92>
 78a:	f0 93 69 00 	sts	0x0069, r31	; 0x800069 <__flp+0x1>
 78e:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <__flp>
 792:	3d c0       	rjmp	.+122    	; 0x80e <free+0x10c>
 794:	e9 01       	movw	r28, r18
 796:	fb 83       	std	Y+3, r31	; 0x03
 798:	ea 83       	std	Y+2, r30	; 0x02
 79a:	49 91       	ld	r20, Y+
 79c:	59 91       	ld	r21, Y+
 79e:	c4 0f       	add	r28, r20
 7a0:	d5 1f       	adc	r29, r21
 7a2:	ec 17       	cp	r30, r28
 7a4:	fd 07       	cpc	r31, r29
 7a6:	61 f4       	brne	.+24     	; 0x7c0 <free+0xbe>
 7a8:	80 81       	ld	r24, Z
 7aa:	91 81       	ldd	r25, Z+1	; 0x01
 7ac:	84 0f       	add	r24, r20
 7ae:	95 1f       	adc	r25, r21
 7b0:	02 96       	adiw	r24, 0x02	; 2
 7b2:	e9 01       	movw	r28, r18
 7b4:	99 83       	std	Y+1, r25	; 0x01
 7b6:	88 83       	st	Y, r24
 7b8:	82 81       	ldd	r24, Z+2	; 0x02
 7ba:	93 81       	ldd	r25, Z+3	; 0x03
 7bc:	9b 83       	std	Y+3, r25	; 0x03
 7be:	8a 83       	std	Y+2, r24	; 0x02
 7c0:	e0 e0       	ldi	r30, 0x00	; 0
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	12 96       	adiw	r26, 0x02	; 2
 7c6:	8d 91       	ld	r24, X+
 7c8:	9c 91       	ld	r25, X
 7ca:	13 97       	sbiw	r26, 0x03	; 3
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <free+0xd4>
 7d0:	fd 01       	movw	r30, r26
 7d2:	dc 01       	movw	r26, r24
 7d4:	f7 cf       	rjmp	.-18     	; 0x7c4 <free+0xc2>
 7d6:	8d 91       	ld	r24, X+
 7d8:	9c 91       	ld	r25, X
 7da:	11 97       	sbiw	r26, 0x01	; 1
 7dc:	9d 01       	movw	r18, r26
 7de:	2e 5f       	subi	r18, 0xFE	; 254
 7e0:	3f 4f       	sbci	r19, 0xFF	; 255
 7e2:	82 0f       	add	r24, r18
 7e4:	93 1f       	adc	r25, r19
 7e6:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 7ea:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 7ee:	28 17       	cp	r18, r24
 7f0:	39 07       	cpc	r19, r25
 7f2:	69 f4       	brne	.+26     	; 0x80e <free+0x10c>
 7f4:	30 97       	sbiw	r30, 0x00	; 0
 7f6:	29 f4       	brne	.+10     	; 0x802 <free+0x100>
 7f8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp+0x1>
 7fc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__flp>
 800:	02 c0       	rjmp	.+4      	; 0x806 <free+0x104>
 802:	13 82       	std	Z+3, r1	; 0x03
 804:	12 82       	std	Z+2, r1	; 0x02
 806:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x1>
 80a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end>
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
