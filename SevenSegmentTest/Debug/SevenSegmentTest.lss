
SevenSegmentTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  000007c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7b  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cf  00000000  00000000  0000185f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007be  00000000  00000000  0000212e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000028ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000898  00000000  00000000  00002f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e2       	ldi	r30, 0x2C	; 44
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a6 e6       	ldi	r26, 0x66	; 102
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	13 d2       	rcall	.+1062   	; 0x478 <main>
  52:	6a c3       	rjmp	.+1748   	; 0x728 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <board_init>:
#include "board.h"

#include <util/delay.h>

void board_init() {
	SPI_interface *interface = tw_create_spi_interface(&DDRB,&PORTB,&PINB,PB2,&DDRB,&PORTB,&PINB,PB0,&DDRB,&PORTB,&PINB,PB3,&USIDR,&USICR,&USISR);
  56:	1f 92       	push	r1
  58:	8e e2       	ldi	r24, 0x2E	; 46
  5a:	8f 93       	push	r24
  5c:	1f 92       	push	r1
  5e:	8d e2       	ldi	r24, 0x2D	; 45
  60:	8f 93       	push	r24
  62:	1f 92       	push	r1
  64:	8f e2       	ldi	r24, 0x2F	; 47
  66:	8f 93       	push	r24
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	8f 93       	push	r24
  6c:	1f 92       	push	r1
  6e:	86 e3       	ldi	r24, 0x36	; 54
  70:	8f 93       	push	r24
  72:	1f 92       	push	r1
  74:	88 e3       	ldi	r24, 0x38	; 56
  76:	8f 93       	push	r24
  78:	0f 2e       	mov	r0, r31
  7a:	f7 e3       	ldi	r31, 0x37	; 55
  7c:	8f 2e       	mov	r8, r31
  7e:	91 2c       	mov	r9, r1
  80:	f0 2d       	mov	r31, r0
  82:	a1 2c       	mov	r10, r1
  84:	0f 2e       	mov	r0, r31
  86:	f6 e3       	ldi	r31, 0x36	; 54
  88:	cf 2e       	mov	r12, r31
  8a:	d1 2c       	mov	r13, r1
  8c:	f0 2d       	mov	r31, r0
  8e:	0f 2e       	mov	r0, r31
  90:	f8 e3       	ldi	r31, 0x38	; 56
  92:	ef 2e       	mov	r14, r31
  94:	f1 2c       	mov	r15, r1
  96:	f0 2d       	mov	r31, r0
  98:	07 e3       	ldi	r16, 0x37	; 55
  9a:	10 e0       	ldi	r17, 0x00	; 0
  9c:	22 e0       	ldi	r18, 0x02	; 2
  9e:	46 e3       	ldi	r20, 0x36	; 54
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	68 e3       	ldi	r22, 0x38	; 56
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	87 e3       	ldi	r24, 0x37	; 55
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	dd d0       	rcall	.+442    	; 0x266 <tw_create_spi_interface>
	ss_instance *instance = ss_init(interface, 4);
  ac:	64 e0       	ldi	r22, 0x04	; 4
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	17 d0       	rcall	.+46     	; 0xe0 <ss_init>
  b2:	8c 01       	movw	r16, r24
  b4:	8d b7       	in	r24, 0x3d	; 61
  b6:	9e b7       	in	r25, 0x3e	; 62
  b8:	0b 96       	adiw	r24, 0x0b	; 11
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	9e bf       	out	0x3e, r25	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	8d bf       	out	0x3d, r24	; 61

	int i = 0;
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
	while (1) {
		ss_write_int(instance, i++);
  c8:	eb 01       	movw	r28, r22
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	c8 01       	movw	r24, r16
  ce:	44 d0       	rcall	.+136    	; 0x158 <ss_write_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <board_init+0x7e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <board_init+0x84>
  da:	00 00       	nop
  dc:	be 01       	movw	r22, r28
  de:	f4 cf       	rjmp	.-24     	; 0xc8 <board_init+0x72>

000000e0 <ss_init>:
	int			        digits;
};

/* Implementation of public functions */

ss_instance *ss_init( const SPI_interface *interface, int digits ) {
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	7b 01       	movw	r14, r22
	
	ss_instance *instance = malloc(sizeof(ss_instance));
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	f8 d1       	rcall	.+1008   	; 0x4e6 <malloc>
  f6:	8c 01       	movw	r16, r24
	instance->interface = interface;
  f8:	fc 01       	movw	r30, r24
  fa:	d1 83       	std	Z+1, r29	; 0x01
  fc:	c0 83       	st	Z, r28
	instance->digits    = digits;
  fe:	f3 82       	std	Z+3, r15	; 0x03
 100:	e2 82       	std	Z+2, r14	; 0x02

	SPI_Setup(interface);
 102:	ce 01       	movw	r24, r28
 104:	06 d1       	rcall	.+524    	; 0x312 <SPI_Setup>
	SPI_Write(interface, SS_SCAN_LIMIT, 0x07); /* set to 8 digit display */
 106:	47 e0       	ldi	r20, 0x07	; 7
 108:	6b e0       	ldi	r22, 0x0B	; 11
 10a:	ce 01       	movw	r24, r28
 10c:	36 d1       	rcall	.+620    	; 0x37a <SPI_Write>
	SPI_Write(interface, SS_DECODE_MODE, 0xFF); /* set all digits to BCD */
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	69 e0       	ldi	r22, 0x09	; 9
 112:	ce 01       	movw	r24, r28
 114:	32 d1       	rcall	.+612    	; 0x37a <SPI_Write>
	SPI_Write(interface, SS_INTENSITY, 0x07); /* set intensity to half */
 116:	47 e0       	ldi	r20, 0x07	; 7
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	ce 01       	movw	r24, r28
 11c:	2e d1       	rcall	.+604    	; 0x37a <SPI_Write>
	SPI_Write(interface, SS_DISPLAY_TEST, 0x00); /* Disable test mode */
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	6f e0       	ldi	r22, 0x0F	; 15
 122:	ce 01       	movw	r24, r28
 124:	2a d1       	rcall	.+596    	; 0x37a <SPI_Write>
	SPI_Write(interface, SS_SHUTDOWN, 0x01);  /* disable shutdown mode */
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	6c e0       	ldi	r22, 0x0C	; 12
 12a:	ce 01       	movw	r24, r28
 12c:	26 d1       	rcall	.+588    	; 0x37a <SPI_Write>

	return instance;
}
 12e:	c8 01       	movw	r24, r16
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	08 95       	ret

0000013e <ss_write_digit>:

void ss_write_digit(const ss_instance *instance, uint8_t digit, uint8_t value) {
	SPI_Write(instance->interface ,SS_D0 + digit, value);
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	91 81       	ldd	r25, Z+1	; 0x01
 146:	19 d1       	rcall	.+562    	; 0x37a <SPI_Write>
 148:	08 95       	ret

0000014a <ss_blank_digit>:
}

void ss_blank_digit(const ss_instance *instance, uint8_t digit) {
	SPI_Write(instance->interface  ,SS_D0 + digit, 0x0F);
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	4f e0       	ldi	r20, 0x0F	; 15
 14e:	fc 01       	movw	r30, r24
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	12 d1       	rcall	.+548    	; 0x37a <SPI_Write>
 156:	08 95       	ret

00000158 <ss_write_int>:
}

void ss_write_int(const ss_instance *instance, int value) {
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	8c 01       	movw	r16, r24
 16a:	cb 01       	movw	r24, r22
	int digit = instance->digits - 1;
 16c:	f8 01       	movw	r30, r16
 16e:	c2 81       	ldd	r28, Z+2	; 0x02
 170:	d3 81       	ldd	r29, Z+3	; 0x03
 172:	21 97       	sbiw	r28, 0x01	; 1
	while (value != 0) {
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	91 f0       	breq	.+36     	; 0x19c <ss_write_int+0x44>
		ss_write_digit(instance, digit, value % 10);
 178:	0f 2e       	mov	r0, r31
 17a:	fa e0       	ldi	r31, 0x0A	; 10
 17c:	cf 2e       	mov	r12, r31
 17e:	d1 2c       	mov	r13, r1
 180:	f0 2d       	mov	r31, r0
 182:	b6 01       	movw	r22, r12
 184:	89 d1       	rcall	.+786    	; 0x498 <__divmodhi4>
 186:	e6 2e       	mov	r14, r22
 188:	f7 2e       	mov	r15, r23
 18a:	48 2f       	mov	r20, r24
 18c:	6c 2f       	mov	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	d6 df       	rcall	.-84     	; 0x13e <ss_write_digit>
		value /= 10;
 192:	8e 2d       	mov	r24, r14
 194:	9f 2d       	mov	r25, r15
		digit--;
 196:	21 97       	sbiw	r28, 0x01	; 1
	SPI_Write(instance->interface  ,SS_D0 + digit, 0x0F);
}

void ss_write_int(const ss_instance *instance, int value) {
	int digit = instance->digits - 1;
	while (value != 0) {
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	99 f7       	brne	.-26     	; 0x182 <ss_write_int+0x2a>
		ss_write_digit(instance, digit, value % 10);
		value /= 10;
		digit--;
	}

	while (digit >= 0) {
 19c:	dd 23       	and	r29, r29
 19e:	2c f0       	brlt	.+10     	; 0x1aa <ss_write_int+0x52>
		ss_blank_digit(instance, digit);
 1a0:	6c 2f       	mov	r22, r28
 1a2:	c8 01       	movw	r24, r16
 1a4:	d2 df       	rcall	.-92     	; 0x14a <ss_blank_digit>
		digit--;
 1a6:	21 97       	sbiw	r28, 0x01	; 1
 1a8:	d8 f7       	brcc	.-10     	; 0x1a0 <ss_write_int+0x48>
	} 
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SPI_Push>:
	volatile uint8_t* usi_status_register;	  /** the universal serial interface status register */
};

/* Private Functions */

 void SPI_Push(const SPI_interface *interface, uint8_t data) {
 1bc:	dc 01       	movw	r26, r24
	 *(interface->scl_port) &= ~(1 << interface->scl_bit);
 1be:	12 96       	adiw	r26, 0x02	; 2
 1c0:	ed 91       	ld	r30, X+
 1c2:	fc 91       	ld	r31, X
 1c4:	13 97       	sbiw	r26, 0x03	; 3
 1c6:	20 81       	ld	r18, Z
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	16 96       	adiw	r26, 0x06	; 6
 1ce:	0c 90       	ld	r0, X
 1d0:	16 97       	sbiw	r26, 0x06	; 6
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <SPI_Push+0x1c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <SPI_Push+0x18>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	80 83       	st	Z, r24
	 *(interface->usi_data_register) = data;
 1e2:	55 96       	adiw	r26, 0x15	; 21
 1e4:	ed 91       	ld	r30, X+
 1e6:	fc 91       	ld	r31, X
 1e8:	56 97       	sbiw	r26, 0x16	; 22
 1ea:	60 83       	st	Z, r22

	 *(interface->usi_status_register) = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)| /* Clear flags */
 1ec:	59 96       	adiw	r26, 0x19	; 25
 1ee:	ed 91       	ld	r30, X+
 1f0:	fc 91       	ld	r31, X
 1f2:	5a 97       	sbiw	r26, 0x1a	; 26
 1f4:	80 ef       	ldi	r24, 0xF0	; 240
 1f6:	80 83       	st	Z, r24
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	87 e8       	ldi	r24, 0x87	; 135
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <SPI_Push+0x42>
 202:	00 00       	nop
										 (0x0 << USICNT0);											  /* set USI to shift 8 bits */

	 do {
		 _delay_us(T2_TWI);
		 *(interface->usi_control_register) |= (1 << USITC); /* toggle clock - positive edge */
 204:	57 96       	adiw	r26, 0x17	; 23
 206:	ed 91       	ld	r30, X+
 208:	fc 91       	ld	r31, X
 20a:	58 97       	sbiw	r26, 0x18	; 24
 20c:	80 81       	ld	r24, Z
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	80 83       	st	Z, r24
		 while (!(*(interface->scl_pin) & (1 << interface->scl_bit)));  /* wait for SCL to go high. */
 212:	14 96       	adiw	r26, 0x04	; 4
 214:	ed 91       	ld	r30, X+
 216:	fc 91       	ld	r31, X
 218:	15 97       	sbiw	r26, 0x05	; 5
 21a:	ab 01       	movw	r20, r22
 21c:	16 96       	adiw	r26, 0x06	; 6
 21e:	0c 90       	ld	r0, X
 220:	16 97       	sbiw	r26, 0x06	; 6
 222:	02 c0       	rjmp	.+4      	; 0x228 <SPI_Push+0x6c>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <SPI_Push+0x68>
 22c:	20 81       	ld	r18, Z
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	24 23       	and	r18, r20
 232:	35 23       	and	r19, r21
 234:	23 2b       	or	r18, r19
 236:	d1 f3       	breq	.-12     	; 0x22c <SPI_Push+0x70>
 238:	88 ee       	ldi	r24, 0xE8	; 232
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <SPI_Push+0x80>
		 _delay_us(T4_TWI);
		 *(interface->usi_control_register) |= (1 << USITC); /* toggle clock - positive edge */
 240:	57 96       	adiw	r26, 0x17	; 23
 242:	ed 91       	ld	r30, X+
 244:	fc 91       	ld	r31, X
 246:	58 97       	sbiw	r26, 0x18	; 24
 248:	80 81       	ld	r24, Z
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	80 83       	st	Z, r24
	 } while (!(*(interface->usi_status_register) & (1 << USIOIF)));
 24e:	59 96       	adiw	r26, 0x19	; 25
 250:	ed 91       	ld	r30, X+
 252:	fc 91       	ld	r31, X
 254:	5a 97       	sbiw	r26, 0x1a	; 26
 256:	80 81       	ld	r24, Z
 258:	86 ff       	sbrs	r24, 6
 25a:	d0 cf       	rjmp	.-96     	; 0x1fc <SPI_Push+0x40>
 25c:	97 e8       	ldi	r25, 0x87	; 135
 25e:	9a 95       	dec	r25
 260:	f1 f7       	brne	.-4      	; 0x25e <SPI_Push+0xa2>
 262:	00 00       	nop
 264:	08 95       	ret

00000266 <tw_create_spi_interface>:
			   
	volatile uint8_t* usi_data_register, 
	volatile uint8_t* usi_control_register, 
	volatile uint8_t* usi_status_register 
	)
{
 266:	2f 92       	push	r2
 268:	3f 92       	push	r3
 26a:	4f 92       	push	r4
 26c:	5f 92       	push	r5
 26e:	6f 92       	push	r6
 270:	7f 92       	push	r7
 272:	8f 92       	push	r8
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	2c 01       	movw	r4, r24
 290:	3b 01       	movw	r6, r22
 292:	1a 01       	movw	r2, r20
 294:	b2 2e       	mov	r11, r18
	SPI_interface *interface = malloc(sizeof(SPI_interface));
 296:	8b e1       	ldi	r24, 0x1B	; 27
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	25 d1       	rcall	.+586    	; 0x4e6 <malloc>
 29c:	fc 01       	movw	r30, r24

	interface->scl_direction_register = scl_direction_register;
 29e:	51 82       	std	Z+1, r5	; 0x01
 2a0:	40 82       	st	Z, r4
	interface->scl_port = scl_port;
 2a2:	73 82       	std	Z+3, r7	; 0x03
 2a4:	62 82       	std	Z+2, r6	; 0x02
	interface->scl_pin = scl_pin;
 2a6:	35 82       	std	Z+5, r3	; 0x05
 2a8:	24 82       	std	Z+4, r2	; 0x04
	interface->scl_bit = scl_bit;
 2aa:	b6 82       	std	Z+6, r11	; 0x06

	interface->sda_direction_register = sda_direction_register;
 2ac:	10 87       	std	Z+8, r17	; 0x08
 2ae:	07 83       	std	Z+7, r16	; 0x07
	interface->sda_port = sda_port;
 2b0:	f2 86       	std	Z+10, r15	; 0x0a
 2b2:	e1 86       	std	Z+9, r14	; 0x09
	interface->sda_pin = sda_pin;
 2b4:	d4 86       	std	Z+12, r13	; 0x0c
 2b6:	c3 86       	std	Z+11, r12	; 0x0b
	interface->sda_bit = sda_bit;
 2b8:	a5 86       	std	Z+13, r10	; 0x0d

	interface->cs_direction_register = cs_direction_register;
 2ba:	97 86       	std	Z+15, r9	; 0x0f
 2bc:	86 86       	std	Z+14, r8	; 0x0e
	interface->cs_port = cs_port;
 2be:	8d 89       	ldd	r24, Y+21	; 0x15
 2c0:	9e 89       	ldd	r25, Y+22	; 0x16
 2c2:	91 8b       	std	Z+17, r25	; 0x11
 2c4:	80 8b       	std	Z+16, r24	; 0x10
	interface->cs_pin = cs_pin;
 2c6:	8f 89       	ldd	r24, Y+23	; 0x17
 2c8:	98 8d       	ldd	r25, Y+24	; 0x18
 2ca:	93 8b       	std	Z+19, r25	; 0x13
 2cc:	82 8b       	std	Z+18, r24	; 0x12
	interface->cs_bit = cs_bit;
 2ce:	89 8d       	ldd	r24, Y+25	; 0x19
 2d0:	84 8b       	std	Z+20, r24	; 0x14

	interface->usi_data_register = usi_data_register;
 2d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 2d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2d6:	96 8b       	std	Z+22, r25	; 0x16
 2d8:	85 8b       	std	Z+21, r24	; 0x15
	interface->usi_control_register = usi_control_register;
 2da:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
 2de:	90 8f       	std	Z+24, r25	; 0x18
 2e0:	87 8b       	std	Z+23, r24	; 0x17
	interface->usi_status_register = usi_status_register;
 2e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
 2e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
 2e6:	92 8f       	std	Z+26, r25	; 0x1a
 2e8:	81 8f       	std	Z+25, r24	; 0x19
	return interface;
}
 2ea:	cf 01       	movw	r24, r30
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	8f 90       	pop	r8
 304:	7f 90       	pop	r7
 306:	6f 90       	pop	r6
 308:	5f 90       	pop	r5
 30a:	4f 90       	pop	r4
 30c:	3f 90       	pop	r3
 30e:	2f 90       	pop	r2
 310:	08 95       	ret

00000312 <SPI_Setup>:

 void SPI_Setup(const SPI_interface *interface) {
 312:	fc 01       	movw	r30, r24
	 /* de-select the correct chip */
	 *(interface->cs_direction_register) |= (1 << interface->cs_bit);
 314:	a6 85       	ldd	r26, Z+14	; 0x0e
 316:	b7 85       	ldd	r27, Z+15	; 0x0f
 318:	4c 91       	ld	r20, X
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	9c 01       	movw	r18, r24
 320:	04 88       	ldd	r0, Z+20	; 0x14
 322:	02 c0       	rjmp	.+4      	; 0x328 <SPI_Setup+0x16>
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <SPI_Setup+0x12>
 32c:	24 2b       	or	r18, r20
 32e:	2c 93       	st	X, r18

	 *(interface->scl_direction_register) |= (1 <<interface->scl_bit);
 330:	a0 81       	ld	r26, Z
 332:	b1 81       	ldd	r27, Z+1	; 0x01
 334:	4c 91       	ld	r20, X
 336:	9c 01       	movw	r18, r24
 338:	06 80       	ldd	r0, Z+6	; 0x06
 33a:	02 c0       	rjmp	.+4      	; 0x340 <SPI_Setup+0x2e>
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <SPI_Setup+0x2a>
 344:	24 2b       	or	r18, r20
 346:	2c 93       	st	X, r18
	 *(interface->sda_direction_register) |= (1 <<interface->sda_bit);
 348:	a7 81       	ldd	r26, Z+7	; 0x07
 34a:	b0 85       	ldd	r27, Z+8	; 0x08
 34c:	2c 91       	ld	r18, X
 34e:	05 84       	ldd	r0, Z+13	; 0x0d
 350:	02 c0       	rjmp	.+4      	; 0x356 <SPI_Setup+0x44>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <SPI_Setup+0x40>
 35a:	82 2b       	or	r24, r18
 35c:	8c 93       	st	X, r24

	 /* Pre-load register with 1 (as pull-ups mean a floating line is high). */
	 *(interface->usi_data_register) = 0xFF;
 35e:	a5 89       	ldd	r26, Z+21	; 0x15
 360:	b6 89       	ldd	r27, Z+22	; 0x16
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	8c 93       	st	X, r24

	 *(interface->usi_control_register) = (0 << USISIE) | (0 << USIOIE) |				  /* Disable interrupts.         */
 366:	a7 89       	ldd	r26, Z+23	; 0x17
 368:	b0 8d       	ldd	r27, Z+24	; 0x18
 36a:	8a e2       	ldi	r24, 0x2A	; 42
 36c:	8c 93       	st	X, r24
										  (1 << USIWM1) | (0 << USIWM0) |				  /* Set USI in Two-wire mode.   */
										  (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | /* Software clock              */
										  (0 << USITC);

	 *(interface->usi_status_register) = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | /* clear flags   */
 36e:	01 8c       	ldd	r0, Z+25	; 0x19
 370:	f2 8d       	ldd	r31, Z+26	; 0x1a
 372:	e0 2d       	mov	r30, r0
 374:	80 ef       	ldi	r24, 0xF0	; 240
 376:	80 83       	st	Z, r24
 378:	08 95       	ret

0000037a <SPI_Write>:
										 (0x0 << USICNT0);											   /* reset counter */
 }

 void SPI_Write(const SPI_interface *interface, uint8_t addr, uint8_t data) {
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	14 2f       	mov	r17, r20

	 /* at this stage we should detect if this is a read or write operation - but I'm only doing writes right now */

	 /* select appropriate chip */
	 *(interface->cs_port) &= ~(1<<interface->cs_bit); 
 388:	e8 89       	ldd	r30, Y+16	; 0x10
 38a:	f9 89       	ldd	r31, Y+17	; 0x11
 38c:	30 81       	ld	r19, Z
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	ac 01       	movw	r20, r24
 394:	0c 88       	ldd	r0, Y+20	; 0x14
 396:	02 c0       	rjmp	.+4      	; 0x39c <SPI_Write+0x22>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <SPI_Write+0x1e>
 3a0:	24 2f       	mov	r18, r20
 3a2:	20 95       	com	r18
 3a4:	23 23       	and	r18, r19
 3a6:	20 83       	st	Z, r18

	 /* release SCL so that a start condition can be raised */
	 *(interface->scl_port) |= (1 << interface->scl_bit);
 3a8:	ea 81       	ldd	r30, Y+2	; 0x02
 3aa:	fb 81       	ldd	r31, Y+3	; 0x03
 3ac:	20 81       	ld	r18, Z
 3ae:	0e 80       	ldd	r0, Y+6	; 0x06
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <SPI_Write+0x3c>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <SPI_Write+0x38>
 3ba:	82 2b       	or	r24, r18
 3bc:	80 83       	st	Z, r24
	 /* chug around this until the pin rises */
	 while (!( *(interface->scl_pin) & (1 << interface->scl_bit)))
 3be:	ec 81       	ldd	r30, Y+4	; 0x04
 3c0:	fd 81       	ldd	r31, Y+5	; 0x05
 3c2:	80 81       	ld	r24, Z
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 80       	ldd	r0, Y+6	; 0x06
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <SPI_Write+0x54>
 3ca:	95 95       	asr	r25
 3cc:	87 95       	ror	r24
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <SPI_Write+0x50>
 3d2:	80 fd       	sbrc	r24, 0
 3d4:	1c c0       	rjmp	.+56     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	 
	 /* start condition */
	 *(interface->sda_port) &= ~(1 << interface->sda_bit); // pull SDA low.
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	e9 85       	ldd	r30, Y+9	; 0x09
 3dc:	fa 85       	ldd	r31, Y+10	; 0x0a
 3de:	90 81       	ld	r25, Z
 3e0:	9a 01       	movw	r18, r20
 3e2:	0d 84       	ldd	r0, Y+13	; 0x0d
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <SPI_Write+0x70>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <SPI_Write+0x6c>
 3ee:	82 2f       	mov	r24, r18
 3f0:	80 95       	com	r24
 3f2:	89 23       	and	r24, r25
 3f4:	80 83       	st	Z, r24
	 *(interface->cs_port) &= ~(1<<interface->cs_bit); 

	 /* release SCL so that a start condition can be raised */
	 *(interface->scl_port) |= (1 << interface->scl_bit);
	 /* chug around this until the pin rises */
	 while (!( *(interface->scl_pin) & (1 << interface->scl_bit)))
 3f6:	ec 81       	ldd	r30, Y+4	; 0x04
 3f8:	fd 81       	ldd	r31, Y+5	; 0x05
 3fa:	80 81       	ld	r24, Z
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 80       	ldd	r0, Y+6	; 0x06
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	80 ff       	sbrs	r24, 0
 40c:	e6 cf       	rjmp	.-52     	; 0x3da <SPI_Write+0x60>
 40e:	87 e8       	ldi	r24, 0x87	; 135
 410:	8a 95       	dec	r24
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 00       	nop
	 
	 /* start condition */
	 *(interface->sda_port) &= ~(1 << interface->sda_bit); // pull SDA low.
	 _delay_us(T2_TWI);
	 *(interface->scl_port) &= ~(1 << interface->scl_bit); // pull SCL low.
 416:	ea 81       	ldd	r30, Y+2	; 0x02
 418:	fb 81       	ldd	r31, Y+3	; 0x03
 41a:	90 81       	ld	r25, Z
 41c:	ee 24       	eor	r14, r14
 41e:	e3 94       	inc	r14
 420:	f1 2c       	mov	r15, r1
 422:	97 01       	movw	r18, r14
 424:	0e 80       	ldd	r0, Y+6	; 0x06
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	22 0f       	add	r18, r18
 42a:	33 1f       	adc	r19, r19
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	82 2f       	mov	r24, r18
 432:	80 95       	com	r24
 434:	89 23       	and	r24, r25
 436:	80 83       	st	Z, r24
	 *(interface->sda_port) |=  (1 << interface->sda_bit); // release SDA.
 438:	e9 85       	ldd	r30, Y+9	; 0x09
 43a:	fa 85       	ldd	r31, Y+10	; 0x0a
 43c:	20 81       	ld	r18, Z
 43e:	c7 01       	movw	r24, r14
 440:	0d 84       	ldd	r0, Y+13	; 0x0d
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	82 2b       	or	r24, r18
 44e:	80 83       	st	Z, r24

	 /* should probably do something to support messages longer than one byte */

	 /* write address */
	 SPI_Push(interface, addr);
 450:	ce 01       	movw	r24, r28
 452:	b4 de       	rcall	.-664    	; 0x1bc <SPI_Push>
	 SPI_Push(interface, data);
 454:	61 2f       	mov	r22, r17
 456:	ce 01       	movw	r24, r28
 458:	b1 de       	rcall	.-670    	; 0x1bc <SPI_Push>

	 /* raise appropriate chip select pin */
	 PORTB |= (1 << interface->cs_bit); /* de-select SS display driver */
 45a:	88 b3       	in	r24, 0x18	; 24
 45c:	0c 88       	ldd	r0, Y+20	; 0x14
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	ee 0c       	add	r14, r14
 462:	ff 1c       	adc	r15, r15
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	e8 2a       	or	r14, r24
 46a:	e8 ba       	out	0x18, r14	; 24
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	08 95       	ret

00000478 <main>:

/* register constants */

int main(void)
{
	DDRB |=	(1<<LED);
 478:	bc 9a       	sbi	0x17, 4	; 23

	board_init();
 47a:	ed dd       	rcall	.-1062   	; 0x56 <board_init>

	/* Replace with your application code */
    while (1)
    {
		PORTB ^= (1<<LED);
 47c:	90 e1       	ldi	r25, 0x10	; 16
 47e:	88 b3       	in	r24, 0x18	; 24
 480:	89 27       	eor	r24, r25
 482:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 484:	2f e9       	ldi	r18, 0x9F	; 159
 486:	36 e8       	ldi	r19, 0x86	; 134
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	30 40       	sbci	r19, 0x00	; 0
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <main+0x12>
 492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x1c>
 494:	00 00       	nop
 496:	f3 cf       	rjmp	.-26     	; 0x47e <main+0x6>

00000498 <__divmodhi4>:
 498:	97 fb       	bst	r25, 7
 49a:	07 2e       	mov	r0, r23
 49c:	16 f4       	brtc	.+4      	; 0x4a2 <__divmodhi4+0xa>
 49e:	00 94       	com	r0
 4a0:	06 d0       	rcall	.+12     	; 0x4ae <__divmodhi4_neg1>
 4a2:	77 fd       	sbrc	r23, 7
 4a4:	08 d0       	rcall	.+16     	; 0x4b6 <__divmodhi4_neg2>
 4a6:	0b d0       	rcall	.+22     	; 0x4be <__udivmodhi4>
 4a8:	07 fc       	sbrc	r0, 7
 4aa:	05 d0       	rcall	.+10     	; 0x4b6 <__divmodhi4_neg2>
 4ac:	3e f4       	brtc	.+14     	; 0x4bc <__divmodhi4_exit>

000004ae <__divmodhi4_neg1>:
 4ae:	90 95       	com	r25
 4b0:	81 95       	neg	r24
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <__divmodhi4_neg2>:
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255

000004bc <__divmodhi4_exit>:
 4bc:	08 95       	ret

000004be <__udivmodhi4>:
 4be:	aa 1b       	sub	r26, r26
 4c0:	bb 1b       	sub	r27, r27
 4c2:	51 e1       	ldi	r21, 0x11	; 17
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__udivmodhi4_ep>

000004c6 <__udivmodhi4_loop>:
 4c6:	aa 1f       	adc	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	a6 17       	cp	r26, r22
 4cc:	b7 07       	cpc	r27, r23
 4ce:	10 f0       	brcs	.+4      	; 0x4d4 <__udivmodhi4_ep>
 4d0:	a6 1b       	sub	r26, r22
 4d2:	b7 0b       	sbc	r27, r23

000004d4 <__udivmodhi4_ep>:
 4d4:	88 1f       	adc	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	5a 95       	dec	r21
 4da:	a9 f7       	brne	.-22     	; 0x4c6 <__udivmodhi4_loop>
 4dc:	80 95       	com	r24
 4de:	90 95       	com	r25
 4e0:	bc 01       	movw	r22, r24
 4e2:	cd 01       	movw	r24, r26
 4e4:	08 95       	ret

000004e6 <malloc>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	10 f4       	brcc	.+4      	; 0x4f8 <malloc+0x12>
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__flp>
 4fc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__flp+0x1>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	a0 e0       	ldi	r26, 0x00	; 0
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	30 97       	sbiw	r30, 0x00	; 0
 50a:	19 f1       	breq	.+70     	; 0x552 <malloc+0x6c>
 50c:	40 81       	ld	r20, Z
 50e:	51 81       	ldd	r21, Z+1	; 0x01
 510:	02 81       	ldd	r16, Z+2	; 0x02
 512:	13 81       	ldd	r17, Z+3	; 0x03
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	c8 f0       	brcs	.+50     	; 0x54c <malloc+0x66>
 51a:	84 17       	cp	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	69 f4       	brne	.+26     	; 0x53a <malloc+0x54>
 520:	10 97       	sbiw	r26, 0x00	; 0
 522:	31 f0       	breq	.+12     	; 0x530 <malloc+0x4a>
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	0c 93       	st	X, r16
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	13 96       	adiw	r26, 0x03	; 3
 52c:	1c 93       	st	X, r17
 52e:	27 c0       	rjmp	.+78     	; 0x57e <malloc+0x98>
 530:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <__flp>
 534:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <__flp+0x1>
 538:	22 c0       	rjmp	.+68     	; 0x57e <malloc+0x98>
 53a:	21 15       	cp	r18, r1
 53c:	31 05       	cpc	r19, r1
 53e:	19 f0       	breq	.+6      	; 0x546 <malloc+0x60>
 540:	42 17       	cp	r20, r18
 542:	53 07       	cpc	r21, r19
 544:	18 f4       	brcc	.+6      	; 0x54c <malloc+0x66>
 546:	9a 01       	movw	r18, r20
 548:	bd 01       	movw	r22, r26
 54a:	ef 01       	movw	r28, r30
 54c:	df 01       	movw	r26, r30
 54e:	f8 01       	movw	r30, r16
 550:	db cf       	rjmp	.-74     	; 0x508 <malloc+0x22>
 552:	21 15       	cp	r18, r1
 554:	31 05       	cpc	r19, r1
 556:	f9 f0       	breq	.+62     	; 0x596 <malloc+0xb0>
 558:	28 1b       	sub	r18, r24
 55a:	39 0b       	sbc	r19, r25
 55c:	24 30       	cpi	r18, 0x04	; 4
 55e:	31 05       	cpc	r19, r1
 560:	80 f4       	brcc	.+32     	; 0x582 <malloc+0x9c>
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	9b 81       	ldd	r25, Y+3	; 0x03
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	21 f0       	breq	.+8      	; 0x574 <malloc+0x8e>
 56c:	fb 01       	movw	r30, r22
 56e:	93 83       	std	Z+3, r25	; 0x03
 570:	82 83       	std	Z+2, r24	; 0x02
 572:	04 c0       	rjmp	.+8      	; 0x57c <malloc+0x96>
 574:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__flp+0x1>
 578:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__flp>
 57c:	fe 01       	movw	r30, r28
 57e:	32 96       	adiw	r30, 0x02	; 2
 580:	44 c0       	rjmp	.+136    	; 0x60a <malloc+0x124>
 582:	fe 01       	movw	r30, r28
 584:	e2 0f       	add	r30, r18
 586:	f3 1f       	adc	r31, r19
 588:	81 93       	st	Z+, r24
 58a:	91 93       	st	Z+, r25
 58c:	22 50       	subi	r18, 0x02	; 2
 58e:	31 09       	sbc	r19, r1
 590:	39 83       	std	Y+1, r19	; 0x01
 592:	28 83       	st	Y, r18
 594:	3a c0       	rjmp	.+116    	; 0x60a <malloc+0x124>
 596:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 59a:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 59e:	23 2b       	or	r18, r19
 5a0:	41 f4       	brne	.+16     	; 0x5b2 <malloc+0xcc>
 5a2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 5a6:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 5aa:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
 5ae:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
 5b2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 5b6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xea>
 5c0:	2d b7       	in	r18, 0x3d	; 61
 5c2:	3e b7       	in	r19, 0x3e	; 62
 5c4:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 5c8:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 5cc:	24 1b       	sub	r18, r20
 5ce:	35 0b       	sbc	r19, r21
 5d0:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 5d4:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 5d8:	e2 17       	cp	r30, r18
 5da:	f3 07       	cpc	r31, r19
 5dc:	a0 f4       	brcc	.+40     	; 0x606 <malloc+0x120>
 5de:	2e 1b       	sub	r18, r30
 5e0:	3f 0b       	sbc	r19, r31
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	78 f0       	brcs	.+30     	; 0x606 <malloc+0x120>
 5e8:	ac 01       	movw	r20, r24
 5ea:	4e 5f       	subi	r20, 0xFE	; 254
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	24 17       	cp	r18, r20
 5f0:	35 07       	cpc	r19, r21
 5f2:	48 f0       	brcs	.+18     	; 0x606 <malloc+0x120>
 5f4:	4e 0f       	add	r20, r30
 5f6:	5f 1f       	adc	r21, r31
 5f8:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <__data_end+0x1>
 5fc:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__data_end>
 600:	81 93       	st	Z+, r24
 602:	91 93       	st	Z+, r25
 604:	02 c0       	rjmp	.+4      	; 0x60a <malloc+0x124>
 606:	e0 e0       	ldi	r30, 0x00	; 0
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	cf 01       	movw	r24, r30
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <free>:
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	09 f4       	brne	.+2      	; 0x620 <free+0xa>
 61e:	81 c0       	rjmp	.+258    	; 0x722 <free+0x10c>
 620:	fc 01       	movw	r30, r24
 622:	32 97       	sbiw	r30, 0x02	; 2
 624:	13 82       	std	Z+3, r1	; 0x03
 626:	12 82       	std	Z+2, r1	; 0x02
 628:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__flp>
 62c:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__flp+0x1>
 630:	10 97       	sbiw	r26, 0x00	; 0
 632:	81 f4       	brne	.+32     	; 0x654 <free+0x3e>
 634:	20 81       	ld	r18, Z
 636:	31 81       	ldd	r19, Z+1	; 0x01
 638:	82 0f       	add	r24, r18
 63a:	93 1f       	adc	r25, r19
 63c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 640:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	51 f5       	brne	.+84     	; 0x69e <free+0x88>
 64a:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
 64e:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
 652:	67 c0       	rjmp	.+206    	; 0x722 <free+0x10c>
 654:	ed 01       	movw	r28, r26
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	ce 17       	cp	r28, r30
 65c:	df 07       	cpc	r29, r31
 65e:	40 f4       	brcc	.+16     	; 0x670 <free+0x5a>
 660:	4a 81       	ldd	r20, Y+2	; 0x02
 662:	5b 81       	ldd	r21, Y+3	; 0x03
 664:	9e 01       	movw	r18, r28
 666:	41 15       	cp	r20, r1
 668:	51 05       	cpc	r21, r1
 66a:	f1 f0       	breq	.+60     	; 0x6a8 <free+0x92>
 66c:	ea 01       	movw	r28, r20
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <free+0x44>
 670:	d3 83       	std	Z+3, r29	; 0x03
 672:	c2 83       	std	Z+2, r28	; 0x02
 674:	40 81       	ld	r20, Z
 676:	51 81       	ldd	r21, Z+1	; 0x01
 678:	84 0f       	add	r24, r20
 67a:	95 1f       	adc	r25, r21
 67c:	c8 17       	cp	r28, r24
 67e:	d9 07       	cpc	r29, r25
 680:	59 f4       	brne	.+22     	; 0x698 <free+0x82>
 682:	88 81       	ld	r24, Y
 684:	99 81       	ldd	r25, Y+1	; 0x01
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	9b 81       	ldd	r25, Y+3	; 0x03
 694:	93 83       	std	Z+3, r25	; 0x03
 696:	82 83       	std	Z+2, r24	; 0x02
 698:	21 15       	cp	r18, r1
 69a:	31 05       	cpc	r19, r1
 69c:	29 f4       	brne	.+10     	; 0x6a8 <free+0x92>
 69e:	f0 93 69 00 	sts	0x0069, r31	; 0x800069 <__flp+0x1>
 6a2:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <__flp>
 6a6:	3d c0       	rjmp	.+122    	; 0x722 <free+0x10c>
 6a8:	e9 01       	movw	r28, r18
 6aa:	fb 83       	std	Y+3, r31	; 0x03
 6ac:	ea 83       	std	Y+2, r30	; 0x02
 6ae:	49 91       	ld	r20, Y+
 6b0:	59 91       	ld	r21, Y+
 6b2:	c4 0f       	add	r28, r20
 6b4:	d5 1f       	adc	r29, r21
 6b6:	ec 17       	cp	r30, r28
 6b8:	fd 07       	cpc	r31, r29
 6ba:	61 f4       	brne	.+24     	; 0x6d4 <free+0xbe>
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	84 0f       	add	r24, r20
 6c2:	95 1f       	adc	r25, r21
 6c4:	02 96       	adiw	r24, 0x02	; 2
 6c6:	e9 01       	movw	r28, r18
 6c8:	99 83       	std	Y+1, r25	; 0x01
 6ca:	88 83       	st	Y, r24
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	9b 83       	std	Y+3, r25	; 0x03
 6d2:	8a 83       	std	Y+2, r24	; 0x02
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	12 96       	adiw	r26, 0x02	; 2
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	13 97       	sbiw	r26, 0x03	; 3
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <free+0xd4>
 6e4:	fd 01       	movw	r30, r26
 6e6:	dc 01       	movw	r26, r24
 6e8:	f7 cf       	rjmp	.-18     	; 0x6d8 <free+0xc2>
 6ea:	8d 91       	ld	r24, X+
 6ec:	9c 91       	ld	r25, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	9d 01       	movw	r18, r26
 6f2:	2e 5f       	subi	r18, 0xFE	; 254
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 6fe:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	69 f4       	brne	.+26     	; 0x722 <free+0x10c>
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	29 f4       	brne	.+10     	; 0x716 <free+0x100>
 70c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp+0x1>
 710:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__flp>
 714:	02 c0       	rjmp	.+4      	; 0x71a <free+0x104>
 716:	13 82       	std	Z+3, r1	; 0x03
 718:	12 82       	std	Z+2, r1	; 0x02
 71a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x1>
 71e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end>
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
