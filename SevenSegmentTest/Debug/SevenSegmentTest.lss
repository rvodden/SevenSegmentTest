
SevenSegmentTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  0000087c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010fd  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000891  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a05  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ee       	ldi	r30, 0xE2	; 226
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a6 e6       	ldi	r26, 0x66	; 102
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 36       	cpi	r26, 0x6A	; 106
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	7b d2       	rcall	.+1270   	; 0x548 <main>
  52:	c5 c3       	rjmp	.+1930   	; 0x7de <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <board_init>:
#include <util/delay.h>

void board_init() {
	int value;

	SPI_interface *interface = tw_create_spi_interface(&DDRB,&PORTB,&PINB,PB2,&DDRB,&PORTB,&PINB,PB0,&DDRB,&PORTB,&PINB,PB4,&USIDR,&USICR,&USISR);
  56:	1f 92       	push	r1
  58:	8e e2       	ldi	r24, 0x2E	; 46
  5a:	8f 93       	push	r24
  5c:	1f 92       	push	r1
  5e:	8d e2       	ldi	r24, 0x2D	; 45
  60:	8f 93       	push	r24
  62:	1f 92       	push	r1
  64:	8f e2       	ldi	r24, 0x2F	; 47
  66:	8f 93       	push	r24
  68:	84 e0       	ldi	r24, 0x04	; 4
  6a:	8f 93       	push	r24
  6c:	1f 92       	push	r1
  6e:	86 e3       	ldi	r24, 0x36	; 54
  70:	8f 93       	push	r24
  72:	1f 92       	push	r1
  74:	88 e3       	ldi	r24, 0x38	; 56
  76:	8f 93       	push	r24
  78:	0f 2e       	mov	r0, r31
  7a:	f7 e3       	ldi	r31, 0x37	; 55
  7c:	8f 2e       	mov	r8, r31
  7e:	91 2c       	mov	r9, r1
  80:	f0 2d       	mov	r31, r0
  82:	a1 2c       	mov	r10, r1
  84:	0f 2e       	mov	r0, r31
  86:	f6 e3       	ldi	r31, 0x36	; 54
  88:	cf 2e       	mov	r12, r31
  8a:	d1 2c       	mov	r13, r1
  8c:	f0 2d       	mov	r31, r0
  8e:	0f 2e       	mov	r0, r31
  90:	f8 e3       	ldi	r31, 0x38	; 56
  92:	ef 2e       	mov	r14, r31
  94:	f1 2c       	mov	r15, r1
  96:	f0 2d       	mov	r31, r0
  98:	07 e3       	ldi	r16, 0x37	; 55
  9a:	10 e0       	ldi	r17, 0x00	; 0
  9c:	22 e0       	ldi	r18, 0x02	; 2
  9e:	46 e3       	ldi	r20, 0x36	; 54
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	68 e3       	ldi	r22, 0x38	; 56
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	87 e3       	ldi	r24, 0x37	; 55
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	45 d1       	rcall	.+650    	; 0x336 <tw_create_spi_interface>
	ss_instance *instance = ss_init(interface, 4);
  ac:	64 e0       	ldi	r22, 0x04	; 4
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	2e d0       	rcall	.+92     	; 0x10e <ss_init>
  b2:	ec 01       	movw	r28, r24
	adc_setup(NULL);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	19 d0       	rcall	.+50     	; 0xec <adc_setup>

	ss_set_dp(instance,2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	ce 01       	movw	r24, r28
  c0:	81 d0       	rcall	.+258    	; 0x1c4 <ss_set_dp>
  c2:	8d b7       	in	r24, 0x3d	; 61
  c4:	9e b7       	in	r25, 0x3e	; 62
  c6:	0b 96       	adiw	r24, 0x0b	; 11
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	9e bf       	out	0x3e, r25	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	8d bf       	out	0x3d, r24	; 61

	int i = 0;
	
	while (1) {
		value = adc_read(NULL);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	10 d0       	rcall	.+32     	; 0xf8 <adc_read>
		ss_write_int(instance, value);
  d8:	bc 01       	movw	r22, r24
  da:	ce 01       	movw	r24, r28
  dc:	a5 d0       	rcall	.+330    	; 0x228 <ss_write_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	87 ea       	ldi	r24, 0xA7	; 167
  e0:	91 e6       	ldi	r25, 0x61	; 97
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <board_init+0x8c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <board_init+0x92>
  e8:	00 00       	nop
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <board_init+0x7c>

000000ec <adc_setup>:
#include "adc.h"

void adc_setup(const adc_interface* interface)
{
	/* configure 1.1V as voltage reference, PB3 as input pin and left adjust the result */
	ADMUX  |= 0x03 | (1<<REFS1);
  ec:	87 b1       	in	r24, 0x07	; 7
  ee:	83 68       	ori	r24, 0x83	; 131
  f0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=  (1<<ADEN); /* enable ADC */
  f2:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA &= ~(1<<ADIE); /* disable interrupt */
  f4:	33 98       	cbi	0x06, 3	; 6
  f6:	08 95       	ret

000000f8 <adc_read>:
}

int adc_read(const adc_interface* interface)
{
	/* Start conversion */
	ADCSRA |= (1<<ADSC);
  f8:	36 9a       	sbi	0x06, 6	; 6

	/* wait for conversion to complete */
	while (ADCSRA & (1<<ADSC));
  fa:	36 99       	sbic	0x06, 6	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <adc_read+0x2>

	int value = ADCL;
  fe:	24 b1       	in	r18, 0x04	; 4
	value += (ADCH<<8);
 100:	85 b1       	in	r24, 0x05	; 5

	return value;
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	98 2f       	mov	r25, r24
 106:	88 27       	eor	r24, r24
 108:	82 0f       	add	r24, r18
 10a:	91 1d       	adc	r25, r1
 10c:	08 95       	ret

0000010e <ss_init>:
	char				decimal_points;
};

/* Implementation of public functions */

ss_instance *ss_init( const SPI_interface *interface, int digits ) {
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
 11c:	7b 01       	movw	r14, r22
	
	ss_instance *instance = malloc(sizeof(ss_instance));
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	3c d2       	rcall	.+1144   	; 0x59c <malloc>
 124:	8c 01       	movw	r16, r24
	instance->interface = interface;
 126:	fc 01       	movw	r30, r24
 128:	d1 83       	std	Z+1, r29	; 0x01
 12a:	c0 83       	st	Z, r28
	instance->digits    = digits;
 12c:	f3 82       	std	Z+3, r15	; 0x03
 12e:	e2 82       	std	Z+2, r14	; 0x02
	instance->values	= malloc(digits);
 130:	c7 01       	movw	r24, r14
 132:	34 d2       	rcall	.+1128   	; 0x59c <malloc>
 134:	f8 01       	movw	r30, r16
 136:	95 83       	std	Z+5, r25	; 0x05
 138:	84 83       	std	Z+4, r24	; 0x04
	instance->decimal_points = 0;
 13a:	16 82       	std	Z+6, r1	; 0x06

	SPI_Setup(interface);
 13c:	ce 01       	movw	r24, r28
 13e:	51 d1       	rcall	.+674    	; 0x3e2 <SPI_Setup>
	SPI_Write(interface, SS_SCAN_LIMIT, 0x07); /* set to 8 digit display */
 140:	47 e0       	ldi	r20, 0x07	; 7
 142:	6b e0       	ldi	r22, 0x0B	; 11
 144:	ce 01       	movw	r24, r28
 146:	81 d1       	rcall	.+770    	; 0x44a <SPI_Write>
	SPI_Write(interface, SS_DECODE_MODE, 0xFF); /* set all digits to BCD */
 148:	4f ef       	ldi	r20, 0xFF	; 255
 14a:	69 e0       	ldi	r22, 0x09	; 9
 14c:	ce 01       	movw	r24, r28
 14e:	7d d1       	rcall	.+762    	; 0x44a <SPI_Write>
	SPI_Write(interface, SS_INTENSITY, 0x07); /* set intensity to half */
 150:	47 e0       	ldi	r20, 0x07	; 7
 152:	6a e0       	ldi	r22, 0x0A	; 10
 154:	ce 01       	movw	r24, r28
 156:	79 d1       	rcall	.+754    	; 0x44a <SPI_Write>
	SPI_Write(interface, SS_DISPLAY_TEST, 0x00); /* Disable test mode */
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	6f e0       	ldi	r22, 0x0F	; 15
 15c:	ce 01       	movw	r24, r28
 15e:	75 d1       	rcall	.+746    	; 0x44a <SPI_Write>
	SPI_Write(interface, SS_SHUTDOWN, 0x01);  /* disable shutdown mode */
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	6c e0       	ldi	r22, 0x0C	; 12
 164:	ce 01       	movw	r24, r28
 166:	71 d1       	rcall	.+738    	; 0x44a <SPI_Write>

	return instance;
}
 168:	c8 01       	movw	r24, r16
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <ss_write_digit>:

void ss_write_digit(const ss_instance *instance, uint8_t digit, uint8_t value) {
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	8c 01       	movw	r16, r24
 182:	d6 2f       	mov	r29, r22
 184:	c4 2f       	mov	r28, r20
	if ( instance->decimal_points & (1<<digit) ) /* is decimal point set */
 186:	dc 01       	movw	r26, r24
 188:	16 96       	adiw	r26, 0x06	; 6
 18a:	8c 91       	ld	r24, X
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <ss_write_digit+0x1c>
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <ss_write_digit+0x18>
 198:	80 fd       	sbrc	r24, 0
		value += 0x80;
 19a:	c0 58       	subi	r28, 0x80	; 128
	SPI_Write(instance->interface ,SS_D0 + digit, value);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	6d 0f       	add	r22, r29
 1a0:	4c 2f       	mov	r20, r28
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	50 d1       	rcall	.+672    	; 0x44a <SPI_Write>
	instance->values[digit] = value;
 1aa:	d8 01       	movw	r26, r16
 1ac:	14 96       	adiw	r26, 0x04	; 4
 1ae:	ed 91       	ld	r30, X+
 1b0:	fc 91       	ld	r31, X
 1b2:	15 97       	sbiw	r26, 0x05	; 5
 1b4:	ed 0f       	add	r30, r29
 1b6:	f1 1d       	adc	r31, r1
 1b8:	c0 83       	st	Z, r28
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <ss_set_dp>:

void ss_set_dp(ss_instance *instance, uint8_t digit) {
	instance->decimal_points |= (1<<digit);
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	06 2e       	mov	r0, r22
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <ss_set_dp+0xc>
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <ss_set_dp+0x8>
 1d4:	dc 01       	movw	r26, r24
 1d6:	16 96       	adiw	r26, 0x06	; 6
 1d8:	3c 91       	ld	r19, X
 1da:	16 97       	sbiw	r26, 0x06	; 6
 1dc:	23 2b       	or	r18, r19
 1de:	16 96       	adiw	r26, 0x06	; 6
 1e0:	2c 93       	st	X, r18
 1e2:	16 97       	sbiw	r26, 0x06	; 6
	ss_write_digit(instance,digit,instance->values[digit]);
 1e4:	14 96       	adiw	r26, 0x04	; 4
 1e6:	ed 91       	ld	r30, X+
 1e8:	fc 91       	ld	r31, X
 1ea:	15 97       	sbiw	r26, 0x05	; 5
 1ec:	e6 0f       	add	r30, r22
 1ee:	f1 1d       	adc	r31, r1
 1f0:	40 81       	ld	r20, Z
 1f2:	c2 df       	rcall	.-124    	; 0x178 <ss_write_digit>
 1f4:	08 95       	ret

000001f6 <ss_blank_digit>:
}

void ss_blank_digit(const ss_instance *instance, uint8_t digit) {
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	8c 01       	movw	r16, r24
 1fe:	c6 2f       	mov	r28, r22
	SPI_Write(instance->interface  ,SS_D0 + digit, 0x0F);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	6c 0f       	add	r22, r28
 204:	4f e0       	ldi	r20, 0x0F	; 15
 206:	dc 01       	movw	r26, r24
 208:	8d 91       	ld	r24, X+
 20a:	9c 91       	ld	r25, X
 20c:	1e d1       	rcall	.+572    	; 0x44a <SPI_Write>
	instance->values[digit] = 10;
 20e:	d8 01       	movw	r26, r16
 210:	14 96       	adiw	r26, 0x04	; 4
 212:	ed 91       	ld	r30, X+
 214:	fc 91       	ld	r31, X
 216:	15 97       	sbiw	r26, 0x05	; 5
 218:	ec 0f       	add	r30, r28
 21a:	f1 1d       	adc	r31, r1
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	80 83       	st	Z, r24
}
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <ss_write_int>:

void ss_write_int(const ss_instance *instance, int value) {
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	8c 01       	movw	r16, r24
 23a:	cb 01       	movw	r24, r22
	int digit = instance->digits - 1;
 23c:	f8 01       	movw	r30, r16
 23e:	c2 81       	ldd	r28, Z+2	; 0x02
 240:	d3 81       	ldd	r29, Z+3	; 0x03
 242:	21 97       	sbiw	r28, 0x01	; 1
	while (value != 0) {
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	91 f0       	breq	.+36     	; 0x26c <__stack+0xd>
		ss_write_digit(instance, digit, value % 10);
 248:	0f 2e       	mov	r0, r31
 24a:	fa e0       	ldi	r31, 0x0A	; 10
 24c:	cf 2e       	mov	r12, r31
 24e:	d1 2c       	mov	r13, r1
 250:	f0 2d       	mov	r31, r0
 252:	b6 01       	movw	r22, r12
 254:	7c d1       	rcall	.+760    	; 0x54e <__divmodhi4>
 256:	e6 2e       	mov	r14, r22
 258:	f7 2e       	mov	r15, r23
 25a:	48 2f       	mov	r20, r24
 25c:	6c 2f       	mov	r22, r28
 25e:	c8 01       	movw	r24, r16
 260:	8b df       	rcall	.-234    	; 0x178 <ss_write_digit>
		value /= 10;
 262:	8e 2d       	mov	r24, r14
 264:	9f 2d       	mov	r25, r15
		digit--;
 266:	21 97       	sbiw	r28, 0x01	; 1
	instance->values[digit] = 10;
}

void ss_write_int(const ss_instance *instance, int value) {
	int digit = instance->digits - 1;
	while (value != 0) {
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	99 f7       	brne	.-26     	; 0x252 <ss_write_int+0x2a>
		ss_write_digit(instance, digit, value % 10);
		value /= 10;
		digit--;
	}

	while (digit >= 0) {
 26c:	dd 23       	and	r29, r29
 26e:	2c f0       	brlt	.+10     	; 0x27a <__stack+0x1b>
		ss_blank_digit(instance, digit);
 270:	6c 2f       	mov	r22, r28
 272:	c8 01       	movw	r24, r16
 274:	c0 df       	rcall	.-128    	; 0x1f6 <ss_blank_digit>
		digit--;
 276:	21 97       	sbiw	r28, 0x01	; 1
 278:	d8 f7       	brcc	.-10     	; 0x270 <__stack+0x11>
	} 
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	08 95       	ret

0000028c <SPI_Push>:
	volatile uint8_t* usi_status_register;	  /** the universal serial interface status register */
};

/* Private Functions */

 void SPI_Push(const SPI_interface *interface, uint8_t data) {
 28c:	dc 01       	movw	r26, r24
	 *(interface->scl_port) &= ~(1 << interface->scl_bit);
 28e:	12 96       	adiw	r26, 0x02	; 2
 290:	ed 91       	ld	r30, X+
 292:	fc 91       	ld	r31, X
 294:	13 97       	sbiw	r26, 0x03	; 3
 296:	20 81       	ld	r18, Z
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	16 96       	adiw	r26, 0x06	; 6
 29e:	0c 90       	ld	r0, X
 2a0:	16 97       	sbiw	r26, 0x06	; 6
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <SPI_Push+0x1c>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <SPI_Push+0x18>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	80 83       	st	Z, r24
	 *(interface->usi_data_register) = data;
 2b2:	55 96       	adiw	r26, 0x15	; 21
 2b4:	ed 91       	ld	r30, X+
 2b6:	fc 91       	ld	r31, X
 2b8:	56 97       	sbiw	r26, 0x16	; 22
 2ba:	60 83       	st	Z, r22

	 *(interface->usi_status_register) = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)| /* Clear flags */
 2bc:	59 96       	adiw	r26, 0x19	; 25
 2be:	ed 91       	ld	r30, X+
 2c0:	fc 91       	ld	r31, X
 2c2:	5a 97       	sbiw	r26, 0x1a	; 26
 2c4:	80 ef       	ldi	r24, 0xF0	; 240
 2c6:	80 83       	st	Z, r24
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	87 e8       	ldi	r24, 0x87	; 135
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <SPI_Push+0x42>
 2d2:	00 00       	nop
										 (0x0 << USICNT0);											  /* set USI to shift 8 bits */

	 do {
		 _delay_us(T2_TWI);
		 *(interface->usi_control_register) |= (1 << USITC); /* toggle clock - positive edge */
 2d4:	57 96       	adiw	r26, 0x17	; 23
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	58 97       	sbiw	r26, 0x18	; 24
 2dc:	80 81       	ld	r24, Z
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	80 83       	st	Z, r24
		 while (!(*(interface->scl_pin) & (1 << interface->scl_bit)));  /* wait for SCL to go high. */
 2e2:	14 96       	adiw	r26, 0x04	; 4
 2e4:	ed 91       	ld	r30, X+
 2e6:	fc 91       	ld	r31, X
 2e8:	15 97       	sbiw	r26, 0x05	; 5
 2ea:	ab 01       	movw	r20, r22
 2ec:	16 96       	adiw	r26, 0x06	; 6
 2ee:	0c 90       	ld	r0, X
 2f0:	16 97       	sbiw	r26, 0x06	; 6
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <SPI_Push+0x6c>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <SPI_Push+0x68>
 2fc:	20 81       	ld	r18, Z
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	24 23       	and	r18, r20
 302:	35 23       	and	r19, r21
 304:	23 2b       	or	r18, r19
 306:	d1 f3       	breq	.-12     	; 0x2fc <SPI_Push+0x70>
 308:	88 ee       	ldi	r24, 0xE8	; 232
 30a:	93 e0       	ldi	r25, 0x03	; 3
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <SPI_Push+0x80>
		 _delay_us(T4_TWI);
		 *(interface->usi_control_register) |= (1 << USITC); /* toggle clock - positive edge */
 310:	57 96       	adiw	r26, 0x17	; 23
 312:	ed 91       	ld	r30, X+
 314:	fc 91       	ld	r31, X
 316:	58 97       	sbiw	r26, 0x18	; 24
 318:	80 81       	ld	r24, Z
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	80 83       	st	Z, r24
	 } while (!(*(interface->usi_status_register) & (1 << USIOIF)));
 31e:	59 96       	adiw	r26, 0x19	; 25
 320:	ed 91       	ld	r30, X+
 322:	fc 91       	ld	r31, X
 324:	5a 97       	sbiw	r26, 0x1a	; 26
 326:	80 81       	ld	r24, Z
 328:	86 ff       	sbrs	r24, 6
 32a:	d0 cf       	rjmp	.-96     	; 0x2cc <SPI_Push+0x40>
 32c:	97 e8       	ldi	r25, 0x87	; 135
 32e:	9a 95       	dec	r25
 330:	f1 f7       	brne	.-4      	; 0x32e <SPI_Push+0xa2>
 332:	00 00       	nop
 334:	08 95       	ret

00000336 <tw_create_spi_interface>:
			   
	volatile uint8_t* usi_data_register, 
	volatile uint8_t* usi_control_register, 
	volatile uint8_t* usi_status_register 
	)
{
 336:	2f 92       	push	r2
 338:	3f 92       	push	r3
 33a:	4f 92       	push	r4
 33c:	5f 92       	push	r5
 33e:	6f 92       	push	r6
 340:	7f 92       	push	r7
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	2c 01       	movw	r4, r24
 360:	3b 01       	movw	r6, r22
 362:	1a 01       	movw	r2, r20
 364:	b2 2e       	mov	r11, r18
	SPI_interface *interface = malloc(sizeof(SPI_interface));
 366:	8b e1       	ldi	r24, 0x1B	; 27
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	18 d1       	rcall	.+560    	; 0x59c <malloc>
 36c:	fc 01       	movw	r30, r24

	interface->scl_direction_register = scl_direction_register;
 36e:	51 82       	std	Z+1, r5	; 0x01
 370:	40 82       	st	Z, r4
	interface->scl_port = scl_port;
 372:	73 82       	std	Z+3, r7	; 0x03
 374:	62 82       	std	Z+2, r6	; 0x02
	interface->scl_pin = scl_pin;
 376:	35 82       	std	Z+5, r3	; 0x05
 378:	24 82       	std	Z+4, r2	; 0x04
	interface->scl_bit = scl_bit;
 37a:	b6 82       	std	Z+6, r11	; 0x06

	interface->sda_direction_register = sda_direction_register;
 37c:	10 87       	std	Z+8, r17	; 0x08
 37e:	07 83       	std	Z+7, r16	; 0x07
	interface->sda_port = sda_port;
 380:	f2 86       	std	Z+10, r15	; 0x0a
 382:	e1 86       	std	Z+9, r14	; 0x09
	interface->sda_pin = sda_pin;
 384:	d4 86       	std	Z+12, r13	; 0x0c
 386:	c3 86       	std	Z+11, r12	; 0x0b
	interface->sda_bit = sda_bit;
 388:	a5 86       	std	Z+13, r10	; 0x0d

	interface->cs_direction_register = cs_direction_register;
 38a:	97 86       	std	Z+15, r9	; 0x0f
 38c:	86 86       	std	Z+14, r8	; 0x0e
	interface->cs_port = cs_port;
 38e:	8d 89       	ldd	r24, Y+21	; 0x15
 390:	9e 89       	ldd	r25, Y+22	; 0x16
 392:	91 8b       	std	Z+17, r25	; 0x11
 394:	80 8b       	std	Z+16, r24	; 0x10
	interface->cs_pin = cs_pin;
 396:	8f 89       	ldd	r24, Y+23	; 0x17
 398:	98 8d       	ldd	r25, Y+24	; 0x18
 39a:	93 8b       	std	Z+19, r25	; 0x13
 39c:	82 8b       	std	Z+18, r24	; 0x12
	interface->cs_bit = cs_bit;
 39e:	89 8d       	ldd	r24, Y+25	; 0x19
 3a0:	84 8b       	std	Z+20, r24	; 0x14

	interface->usi_data_register = usi_data_register;
 3a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 3a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3a6:	96 8b       	std	Z+22, r25	; 0x16
 3a8:	85 8b       	std	Z+21, r24	; 0x15
	interface->usi_control_register = usi_control_register;
 3aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
 3ae:	90 8f       	std	Z+24, r25	; 0x18
 3b0:	87 8b       	std	Z+23, r24	; 0x17
	interface->usi_status_register = usi_status_register;
 3b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
 3b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
 3b6:	92 8f       	std	Z+26, r25	; 0x1a
 3b8:	81 8f       	std	Z+25, r24	; 0x19
	return interface;
}
 3ba:	cf 01       	movw	r24, r30
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	bf 90       	pop	r11
 3ce:	af 90       	pop	r10
 3d0:	9f 90       	pop	r9
 3d2:	8f 90       	pop	r8
 3d4:	7f 90       	pop	r7
 3d6:	6f 90       	pop	r6
 3d8:	5f 90       	pop	r5
 3da:	4f 90       	pop	r4
 3dc:	3f 90       	pop	r3
 3de:	2f 90       	pop	r2
 3e0:	08 95       	ret

000003e2 <SPI_Setup>:

 void SPI_Setup(const SPI_interface *interface) {
 3e2:	fc 01       	movw	r30, r24
	 /* de-select the correct chip */
	 *(interface->cs_direction_register) |= (1 << interface->cs_bit);
 3e4:	a6 85       	ldd	r26, Z+14	; 0x0e
 3e6:	b7 85       	ldd	r27, Z+15	; 0x0f
 3e8:	4c 91       	ld	r20, X
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	9c 01       	movw	r18, r24
 3f0:	04 88       	ldd	r0, Z+20	; 0x14
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <SPI_Setup+0x16>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <SPI_Setup+0x12>
 3fc:	24 2b       	or	r18, r20
 3fe:	2c 93       	st	X, r18

	 *(interface->scl_direction_register) |= (1 <<interface->scl_bit);
 400:	a0 81       	ld	r26, Z
 402:	b1 81       	ldd	r27, Z+1	; 0x01
 404:	4c 91       	ld	r20, X
 406:	9c 01       	movw	r18, r24
 408:	06 80       	ldd	r0, Z+6	; 0x06
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	24 2b       	or	r18, r20
 416:	2c 93       	st	X, r18
	 *(interface->sda_direction_register) |= (1 <<interface->sda_bit);
 418:	a7 81       	ldd	r26, Z+7	; 0x07
 41a:	b0 85       	ldd	r27, Z+8	; 0x08
 41c:	2c 91       	ld	r18, X
 41e:	05 84       	ldd	r0, Z+13	; 0x0d
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	82 2b       	or	r24, r18
 42c:	8c 93       	st	X, r24

	 /* Pre-load register with 1 (as pull-ups mean a floating line is high). */
	 *(interface->usi_data_register) = 0xFF;
 42e:	a5 89       	ldd	r26, Z+21	; 0x15
 430:	b6 89       	ldd	r27, Z+22	; 0x16
 432:	8f ef       	ldi	r24, 0xFF	; 255
 434:	8c 93       	st	X, r24

	 *(interface->usi_control_register) = (0 << USISIE) | (0 << USIOIE) |				  /* Disable interrupts.         */
 436:	a7 89       	ldd	r26, Z+23	; 0x17
 438:	b0 8d       	ldd	r27, Z+24	; 0x18
 43a:	8a e2       	ldi	r24, 0x2A	; 42
 43c:	8c 93       	st	X, r24
										  (1 << USIWM1) | (0 << USIWM0) |				  /* Set USI in Two-wire mode.   */
										  (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | /* Software clock              */
										  (0 << USITC);

	 *(interface->usi_status_register) = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | /* clear flags   */
 43e:	01 8c       	ldd	r0, Z+25	; 0x19
 440:	f2 8d       	ldd	r31, Z+26	; 0x1a
 442:	e0 2d       	mov	r30, r0
 444:	80 ef       	ldi	r24, 0xF0	; 240
 446:	80 83       	st	Z, r24
 448:	08 95       	ret

0000044a <SPI_Write>:
										 (0x0 << USICNT0);											   /* reset counter */
 }

 void SPI_Write(const SPI_interface *interface, uint8_t addr, uint8_t data) {
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
 456:	14 2f       	mov	r17, r20

	 /* at this stage we should detect if this is a read or write operation - but I'm only doing writes right now */

	 /* select appropriate chip */
	 *(interface->cs_port) &= ~(1<<interface->cs_bit); 
 458:	e8 89       	ldd	r30, Y+16	; 0x10
 45a:	f9 89       	ldd	r31, Y+17	; 0x11
 45c:	30 81       	ld	r19, Z
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	ac 01       	movw	r20, r24
 464:	0c 88       	ldd	r0, Y+20	; 0x14
 466:	02 c0       	rjmp	.+4      	; 0x46c <SPI_Write+0x22>
 468:	44 0f       	add	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <SPI_Write+0x1e>
 470:	24 2f       	mov	r18, r20
 472:	20 95       	com	r18
 474:	23 23       	and	r18, r19
 476:	20 83       	st	Z, r18

	 /* release SCL so that a start condition can be raised */
	 *(interface->scl_port) |= (1 << interface->scl_bit);
 478:	ea 81       	ldd	r30, Y+2	; 0x02
 47a:	fb 81       	ldd	r31, Y+3	; 0x03
 47c:	20 81       	ld	r18, Z
 47e:	0e 80       	ldd	r0, Y+6	; 0x06
 480:	02 c0       	rjmp	.+4      	; 0x486 <SPI_Write+0x3c>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <SPI_Write+0x38>
 48a:	82 2b       	or	r24, r18
 48c:	80 83       	st	Z, r24
	 /* chug around this until the pin rises */
	 while (!( *(interface->scl_pin) & (1 << interface->scl_bit)))
 48e:	ec 81       	ldd	r30, Y+4	; 0x04
 490:	fd 81       	ldd	r31, Y+5	; 0x05
 492:	80 81       	ld	r24, Z
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 80       	ldd	r0, Y+6	; 0x06
 498:	02 c0       	rjmp	.+4      	; 0x49e <SPI_Write+0x54>
 49a:	95 95       	asr	r25
 49c:	87 95       	ror	r24
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <SPI_Write+0x50>
 4a2:	80 fd       	sbrc	r24, 0
 4a4:	1c c0       	rjmp	.+56     	; 0x4de <SPI_Write+0x94>
	 
	 /* start condition */
	 *(interface->sda_port) &= ~(1 << interface->sda_bit); // pull SDA low.
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	e9 85       	ldd	r30, Y+9	; 0x09
 4ac:	fa 85       	ldd	r31, Y+10	; 0x0a
 4ae:	90 81       	ld	r25, Z
 4b0:	9a 01       	movw	r18, r20
 4b2:	0d 84       	ldd	r0, Y+13	; 0x0d
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <SPI_Write+0x70>
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <SPI_Write+0x6c>
 4be:	82 2f       	mov	r24, r18
 4c0:	80 95       	com	r24
 4c2:	89 23       	and	r24, r25
 4c4:	80 83       	st	Z, r24
	 *(interface->cs_port) &= ~(1<<interface->cs_bit); 

	 /* release SCL so that a start condition can be raised */
	 *(interface->scl_port) |= (1 << interface->scl_bit);
	 /* chug around this until the pin rises */
	 while (!( *(interface->scl_pin) & (1 << interface->scl_bit)))
 4c6:	ec 81       	ldd	r30, Y+4	; 0x04
 4c8:	fd 81       	ldd	r31, Y+5	; 0x05
 4ca:	80 81       	ld	r24, Z
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 80       	ldd	r0, Y+6	; 0x06
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <SPI_Write+0x8c>
 4d2:	95 95       	asr	r25
 4d4:	87 95       	ror	r24
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <SPI_Write+0x88>
 4da:	80 ff       	sbrs	r24, 0
 4dc:	e6 cf       	rjmp	.-52     	; 0x4aa <SPI_Write+0x60>
 4de:	87 e8       	ldi	r24, 0x87	; 135
 4e0:	8a 95       	dec	r24
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <SPI_Write+0x96>
 4e4:	00 00       	nop
	 
	 /* start condition */
	 *(interface->sda_port) &= ~(1 << interface->sda_bit); // pull SDA low.
	 _delay_us(T2_TWI);
	 *(interface->scl_port) &= ~(1 << interface->scl_bit); // pull SCL low.
 4e6:	ea 81       	ldd	r30, Y+2	; 0x02
 4e8:	fb 81       	ldd	r31, Y+3	; 0x03
 4ea:	90 81       	ld	r25, Z
 4ec:	ee 24       	eor	r14, r14
 4ee:	e3 94       	inc	r14
 4f0:	f1 2c       	mov	r15, r1
 4f2:	97 01       	movw	r18, r14
 4f4:	0e 80       	ldd	r0, Y+6	; 0x06
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <SPI_Write+0xb2>
 4f8:	22 0f       	add	r18, r18
 4fa:	33 1f       	adc	r19, r19
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <SPI_Write+0xae>
 500:	82 2f       	mov	r24, r18
 502:	80 95       	com	r24
 504:	89 23       	and	r24, r25
 506:	80 83       	st	Z, r24
	 *(interface->sda_port) |=  (1 << interface->sda_bit); // release SDA.
 508:	e9 85       	ldd	r30, Y+9	; 0x09
 50a:	fa 85       	ldd	r31, Y+10	; 0x0a
 50c:	20 81       	ld	r18, Z
 50e:	c7 01       	movw	r24, r14
 510:	0d 84       	ldd	r0, Y+13	; 0x0d
 512:	02 c0       	rjmp	.+4      	; 0x518 <SPI_Write+0xce>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <SPI_Write+0xca>
 51c:	82 2b       	or	r24, r18
 51e:	80 83       	st	Z, r24

	 /* should probably do something to support messages longer than one byte */

	 /* write address */
	 SPI_Push(interface, addr);
 520:	ce 01       	movw	r24, r28
 522:	b4 de       	rcall	.-664    	; 0x28c <SPI_Push>
	 SPI_Push(interface, data);
 524:	61 2f       	mov	r22, r17
 526:	ce 01       	movw	r24, r28
 528:	b1 de       	rcall	.-670    	; 0x28c <SPI_Push>

	 /* raise appropriate chip select pin */
	 PORTB |= (1 << interface->cs_bit); /* de-select SS display driver */
 52a:	88 b3       	in	r24, 0x18	; 24
 52c:	0c 88       	ldd	r0, Y+20	; 0x14
 52e:	02 c0       	rjmp	.+4      	; 0x534 <SPI_Write+0xea>
 530:	ee 0c       	add	r14, r14
 532:	ff 1c       	adc	r15, r15
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <SPI_Write+0xe6>
 538:	e8 2a       	or	r14, r24
 53a:	e8 ba       	out	0x18, r14	; 24
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <main>:

/* register constants */

int main(void)
{
	DDRB |=	(1<<LED);
 548:	b9 9a       	sbi	0x17, 1	; 23
	

	board_init();
 54a:	85 dd       	rcall	.-1270   	; 0x56 <board_init>
 54c:	ff cf       	rjmp	.-2      	; 0x54c <main+0x4>

0000054e <__divmodhi4>:
 54e:	97 fb       	bst	r25, 7
 550:	07 2e       	mov	r0, r23
 552:	16 f4       	brtc	.+4      	; 0x558 <__divmodhi4+0xa>
 554:	00 94       	com	r0
 556:	06 d0       	rcall	.+12     	; 0x564 <__divmodhi4_neg1>
 558:	77 fd       	sbrc	r23, 7
 55a:	08 d0       	rcall	.+16     	; 0x56c <__divmodhi4_neg2>
 55c:	0b d0       	rcall	.+22     	; 0x574 <__udivmodhi4>
 55e:	07 fc       	sbrc	r0, 7
 560:	05 d0       	rcall	.+10     	; 0x56c <__divmodhi4_neg2>
 562:	3e f4       	brtc	.+14     	; 0x572 <__divmodhi4_exit>

00000564 <__divmodhi4_neg1>:
 564:	90 95       	com	r25
 566:	81 95       	neg	r24
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__divmodhi4_neg2>:
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255

00000572 <__divmodhi4_exit>:
 572:	08 95       	ret

00000574 <__udivmodhi4>:
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	51 e1       	ldi	r21, 0x11	; 17
 57a:	07 c0       	rjmp	.+14     	; 0x58a <__udivmodhi4_ep>

0000057c <__udivmodhi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	a6 17       	cp	r26, r22
 582:	b7 07       	cpc	r27, r23
 584:	10 f0       	brcs	.+4      	; 0x58a <__udivmodhi4_ep>
 586:	a6 1b       	sub	r26, r22
 588:	b7 0b       	sbc	r27, r23

0000058a <__udivmodhi4_ep>:
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	5a 95       	dec	r21
 590:	a9 f7       	brne	.-22     	; 0x57c <__udivmodhi4_loop>
 592:	80 95       	com	r24
 594:	90 95       	com	r25
 596:	bc 01       	movw	r22, r24
 598:	cd 01       	movw	r24, r26
 59a:	08 95       	ret

0000059c <malloc>:
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	82 30       	cpi	r24, 0x02	; 2
 5a6:	91 05       	cpc	r25, r1
 5a8:	10 f4       	brcc	.+4      	; 0x5ae <malloc+0x12>
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__flp>
 5b2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__flp+0x1>
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	a0 e0       	ldi	r26, 0x00	; 0
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	30 97       	sbiw	r30, 0x00	; 0
 5c0:	19 f1       	breq	.+70     	; 0x608 <malloc+0x6c>
 5c2:	40 81       	ld	r20, Z
 5c4:	51 81       	ldd	r21, Z+1	; 0x01
 5c6:	02 81       	ldd	r16, Z+2	; 0x02
 5c8:	13 81       	ldd	r17, Z+3	; 0x03
 5ca:	48 17       	cp	r20, r24
 5cc:	59 07       	cpc	r21, r25
 5ce:	c8 f0       	brcs	.+50     	; 0x602 <malloc+0x66>
 5d0:	84 17       	cp	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	69 f4       	brne	.+26     	; 0x5f0 <malloc+0x54>
 5d6:	10 97       	sbiw	r26, 0x00	; 0
 5d8:	31 f0       	breq	.+12     	; 0x5e6 <malloc+0x4a>
 5da:	12 96       	adiw	r26, 0x02	; 2
 5dc:	0c 93       	st	X, r16
 5de:	12 97       	sbiw	r26, 0x02	; 2
 5e0:	13 96       	adiw	r26, 0x03	; 3
 5e2:	1c 93       	st	X, r17
 5e4:	27 c0       	rjmp	.+78     	; 0x634 <malloc+0x98>
 5e6:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <__flp>
 5ea:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <__flp+0x1>
 5ee:	22 c0       	rjmp	.+68     	; 0x634 <malloc+0x98>
 5f0:	21 15       	cp	r18, r1
 5f2:	31 05       	cpc	r19, r1
 5f4:	19 f0       	breq	.+6      	; 0x5fc <malloc+0x60>
 5f6:	42 17       	cp	r20, r18
 5f8:	53 07       	cpc	r21, r19
 5fa:	18 f4       	brcc	.+6      	; 0x602 <malloc+0x66>
 5fc:	9a 01       	movw	r18, r20
 5fe:	bd 01       	movw	r22, r26
 600:	ef 01       	movw	r28, r30
 602:	df 01       	movw	r26, r30
 604:	f8 01       	movw	r30, r16
 606:	db cf       	rjmp	.-74     	; 0x5be <malloc+0x22>
 608:	21 15       	cp	r18, r1
 60a:	31 05       	cpc	r19, r1
 60c:	f9 f0       	breq	.+62     	; 0x64c <malloc+0xb0>
 60e:	28 1b       	sub	r18, r24
 610:	39 0b       	sbc	r19, r25
 612:	24 30       	cpi	r18, 0x04	; 4
 614:	31 05       	cpc	r19, r1
 616:	80 f4       	brcc	.+32     	; 0x638 <malloc+0x9c>
 618:	8a 81       	ldd	r24, Y+2	; 0x02
 61a:	9b 81       	ldd	r25, Y+3	; 0x03
 61c:	61 15       	cp	r22, r1
 61e:	71 05       	cpc	r23, r1
 620:	21 f0       	breq	.+8      	; 0x62a <malloc+0x8e>
 622:	fb 01       	movw	r30, r22
 624:	93 83       	std	Z+3, r25	; 0x03
 626:	82 83       	std	Z+2, r24	; 0x02
 628:	04 c0       	rjmp	.+8      	; 0x632 <malloc+0x96>
 62a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__flp+0x1>
 62e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__flp>
 632:	fe 01       	movw	r30, r28
 634:	32 96       	adiw	r30, 0x02	; 2
 636:	44 c0       	rjmp	.+136    	; 0x6c0 <malloc+0x124>
 638:	fe 01       	movw	r30, r28
 63a:	e2 0f       	add	r30, r18
 63c:	f3 1f       	adc	r31, r19
 63e:	81 93       	st	Z+, r24
 640:	91 93       	st	Z+, r25
 642:	22 50       	subi	r18, 0x02	; 2
 644:	31 09       	sbc	r19, r1
 646:	39 83       	std	Y+1, r19	; 0x01
 648:	28 83       	st	Y, r18
 64a:	3a c0       	rjmp	.+116    	; 0x6c0 <malloc+0x124>
 64c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 650:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 654:	23 2b       	or	r18, r19
 656:	41 f4       	brne	.+16     	; 0x668 <malloc+0xcc>
 658:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 65c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 660:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
 664:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
 668:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 66c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 670:	21 15       	cp	r18, r1
 672:	31 05       	cpc	r19, r1
 674:	41 f4       	brne	.+16     	; 0x686 <malloc+0xea>
 676:	2d b7       	in	r18, 0x3d	; 61
 678:	3e b7       	in	r19, 0x3e	; 62
 67a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 67e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 682:	24 1b       	sub	r18, r20
 684:	35 0b       	sbc	r19, r21
 686:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 68a:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 68e:	e2 17       	cp	r30, r18
 690:	f3 07       	cpc	r31, r19
 692:	a0 f4       	brcc	.+40     	; 0x6bc <malloc+0x120>
 694:	2e 1b       	sub	r18, r30
 696:	3f 0b       	sbc	r19, r31
 698:	28 17       	cp	r18, r24
 69a:	39 07       	cpc	r19, r25
 69c:	78 f0       	brcs	.+30     	; 0x6bc <malloc+0x120>
 69e:	ac 01       	movw	r20, r24
 6a0:	4e 5f       	subi	r20, 0xFE	; 254
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	24 17       	cp	r18, r20
 6a6:	35 07       	cpc	r19, r21
 6a8:	48 f0       	brcs	.+18     	; 0x6bc <malloc+0x120>
 6aa:	4e 0f       	add	r20, r30
 6ac:	5f 1f       	adc	r21, r31
 6ae:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <__data_end+0x1>
 6b2:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__data_end>
 6b6:	81 93       	st	Z+, r24
 6b8:	91 93       	st	Z+, r25
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <malloc+0x124>
 6bc:	e0 e0       	ldi	r30, 0x00	; 0
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	cf 01       	movw	r24, r30
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <free>:
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <free+0xa>
 6d4:	81 c0       	rjmp	.+258    	; 0x7d8 <free+0x10c>
 6d6:	fc 01       	movw	r30, r24
 6d8:	32 97       	sbiw	r30, 0x02	; 2
 6da:	13 82       	std	Z+3, r1	; 0x03
 6dc:	12 82       	std	Z+2, r1	; 0x02
 6de:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__flp>
 6e2:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__flp+0x1>
 6e6:	10 97       	sbiw	r26, 0x00	; 0
 6e8:	81 f4       	brne	.+32     	; 0x70a <free+0x3e>
 6ea:	20 81       	ld	r18, Z
 6ec:	31 81       	ldd	r19, Z+1	; 0x01
 6ee:	82 0f       	add	r24, r18
 6f0:	93 1f       	adc	r25, r19
 6f2:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 6f6:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 6fa:	28 17       	cp	r18, r24
 6fc:	39 07       	cpc	r19, r25
 6fe:	51 f5       	brne	.+84     	; 0x754 <free+0x88>
 700:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
 704:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
 708:	67 c0       	rjmp	.+206    	; 0x7d8 <free+0x10c>
 70a:	ed 01       	movw	r28, r26
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	ce 17       	cp	r28, r30
 712:	df 07       	cpc	r29, r31
 714:	40 f4       	brcc	.+16     	; 0x726 <free+0x5a>
 716:	4a 81       	ldd	r20, Y+2	; 0x02
 718:	5b 81       	ldd	r21, Y+3	; 0x03
 71a:	9e 01       	movw	r18, r28
 71c:	41 15       	cp	r20, r1
 71e:	51 05       	cpc	r21, r1
 720:	f1 f0       	breq	.+60     	; 0x75e <free+0x92>
 722:	ea 01       	movw	r28, r20
 724:	f5 cf       	rjmp	.-22     	; 0x710 <free+0x44>
 726:	d3 83       	std	Z+3, r29	; 0x03
 728:	c2 83       	std	Z+2, r28	; 0x02
 72a:	40 81       	ld	r20, Z
 72c:	51 81       	ldd	r21, Z+1	; 0x01
 72e:	84 0f       	add	r24, r20
 730:	95 1f       	adc	r25, r21
 732:	c8 17       	cp	r28, r24
 734:	d9 07       	cpc	r29, r25
 736:	59 f4       	brne	.+22     	; 0x74e <free+0x82>
 738:	88 81       	ld	r24, Y
 73a:	99 81       	ldd	r25, Y+1	; 0x01
 73c:	84 0f       	add	r24, r20
 73e:	95 1f       	adc	r25, r21
 740:	02 96       	adiw	r24, 0x02	; 2
 742:	91 83       	std	Z+1, r25	; 0x01
 744:	80 83       	st	Z, r24
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	9b 81       	ldd	r25, Y+3	; 0x03
 74a:	93 83       	std	Z+3, r25	; 0x03
 74c:	82 83       	std	Z+2, r24	; 0x02
 74e:	21 15       	cp	r18, r1
 750:	31 05       	cpc	r19, r1
 752:	29 f4       	brne	.+10     	; 0x75e <free+0x92>
 754:	f0 93 69 00 	sts	0x0069, r31	; 0x800069 <__flp+0x1>
 758:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <__flp>
 75c:	3d c0       	rjmp	.+122    	; 0x7d8 <free+0x10c>
 75e:	e9 01       	movw	r28, r18
 760:	fb 83       	std	Y+3, r31	; 0x03
 762:	ea 83       	std	Y+2, r30	; 0x02
 764:	49 91       	ld	r20, Y+
 766:	59 91       	ld	r21, Y+
 768:	c4 0f       	add	r28, r20
 76a:	d5 1f       	adc	r29, r21
 76c:	ec 17       	cp	r30, r28
 76e:	fd 07       	cpc	r31, r29
 770:	61 f4       	brne	.+24     	; 0x78a <free+0xbe>
 772:	80 81       	ld	r24, Z
 774:	91 81       	ldd	r25, Z+1	; 0x01
 776:	84 0f       	add	r24, r20
 778:	95 1f       	adc	r25, r21
 77a:	02 96       	adiw	r24, 0x02	; 2
 77c:	e9 01       	movw	r28, r18
 77e:	99 83       	std	Y+1, r25	; 0x01
 780:	88 83       	st	Y, r24
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	9b 83       	std	Y+3, r25	; 0x03
 788:	8a 83       	std	Y+2, r24	; 0x02
 78a:	e0 e0       	ldi	r30, 0x00	; 0
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	12 96       	adiw	r26, 0x02	; 2
 790:	8d 91       	ld	r24, X+
 792:	9c 91       	ld	r25, X
 794:	13 97       	sbiw	r26, 0x03	; 3
 796:	00 97       	sbiw	r24, 0x00	; 0
 798:	19 f0       	breq	.+6      	; 0x7a0 <free+0xd4>
 79a:	fd 01       	movw	r30, r26
 79c:	dc 01       	movw	r26, r24
 79e:	f7 cf       	rjmp	.-18     	; 0x78e <free+0xc2>
 7a0:	8d 91       	ld	r24, X+
 7a2:	9c 91       	ld	r25, X
 7a4:	11 97       	sbiw	r26, 0x01	; 1
 7a6:	9d 01       	movw	r18, r26
 7a8:	2e 5f       	subi	r18, 0xFE	; 254
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
 7ac:	82 0f       	add	r24, r18
 7ae:	93 1f       	adc	r25, r19
 7b0:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 7b4:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 7b8:	28 17       	cp	r18, r24
 7ba:	39 07       	cpc	r19, r25
 7bc:	69 f4       	brne	.+26     	; 0x7d8 <free+0x10c>
 7be:	30 97       	sbiw	r30, 0x00	; 0
 7c0:	29 f4       	brne	.+10     	; 0x7cc <free+0x100>
 7c2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp+0x1>
 7c6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__flp>
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <free+0x104>
 7cc:	13 82       	std	Z+3, r1	; 0x03
 7ce:	12 82       	std	Z+2, r1	; 0x02
 7d0:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x1>
 7d4:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end>
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
